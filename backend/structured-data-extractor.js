#!/usr/bin/env node
require('dotenv').config();

const axios = require('axios');
const cheerio = require('cheerio');
const { Pool } = require('pg');

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

// Schema.org Íµ¨Ï°∞ÌôîÎêú Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂úÍ∏∞
class StructuredDataExtractor {
  constructor() {
    this.stats = {
      pages_processed: 0,
      structured_data_found: 0,
      exhibitions_extracted: 0,
      verified_data: 0,
      errors: 0
    };

    // Í≤ÄÏ¶ùÎêú Ïã§Ï†ú ÎØ∏Ïà†Í¥Ä ÏÇ¨Ïù¥Ìä∏Îì§
    this.targetSites = [
      {
        name: 'MoMA',
        url: 'https://www.moma.org',
        exhibitions_path: '/calendar/exhibitions',
        country: 'US',
        city: 'New York'
      },
      {
        name: 'Guggenheim',
        url: 'https://www.guggenheim.org',
        exhibitions_path: '/exhibitions',
        country: 'US',
        city: 'New York'
      },
      {
        name: 'Tate Modern',
        url: 'https://www.tate.org.uk',
        exhibitions_path: '/whats-on',
        country: 'UK',
        city: 'London'
      },
      {
        name: 'Centre Pompidou',
        url: 'https://www.centrepompidou.fr',
        exhibitions_path: '/en/program/calendar',
        country: 'FR',
        city: 'Paris'
      },
      {
        name: 'Íµ≠Î¶ΩÌòÑÎåÄÎØ∏Ïà†Í¥Ä',
        url: 'https://www.mmca.go.kr',
        exhibitions_path: '/exhibitions/progressList.do',
        country: 'KR',
        city: 'ÏÑúÏö∏'
      }
    ];
  }

  async extractRealExhibitionData() {
    console.log('üîç Schema.org Íµ¨Ï°∞ÌôîÎêú Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú ÏãúÏûë');
    console.log('‚úÖ Ïã§Ï†ú ÎØ∏Ïà†Í¥Ä ÏõπÏÇ¨Ïù¥Ìä∏ÏóêÏÑú Í≤ÄÏ¶ùÎêú Ï†ÑÏãú Ï†ïÎ≥¥ ÏàòÏßë');
    console.log('‚öñÔ∏è robots.txt Ï§ÄÏàò Î∞è Ìï©Î≤ïÏ†Å Ï†ëÍ∑ºÎßå ÏàòÌñâ\n');

    try {
      // 1. robots.txt ÌôïÏù∏ Î∞è Ï†ëÍ∑º Í∂åÌïú Ï≤¥ÌÅ¨
      await this.checkRobotsPermissions();

      // 2. Í∞Å ÏÇ¨Ïù¥Ìä∏ÏóêÏÑú Íµ¨Ï°∞ÌôîÎêú Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú
      await this.extractFromTargetSites();

      // 3. ÌäπÏ†ï Ï†ÑÏãú ÌéòÏù¥ÏßÄ Ïã¨Ìôî Î∂ÑÏÑù
      await this.deepDiveExhibitionPages();

      // 4. Í≤∞Í≥º ÏöîÏïΩ
      await this.showExtractionResults();

    } catch (error) {
      console.error('‚ùå Ï∂îÏ∂ú Ï§ë Ïò§Î•ò:', error.message);
    }
  }

  async checkRobotsPermissions() {
    console.log('ü§ñ robots.txt ÌôïÏù∏ Î∞è Ï†ëÍ∑º Í∂åÌïú Ï≤¥ÌÅ¨...');

    for (const site of this.targetSites) {
      try {
        const robotsUrl = `${site.url}/robots.txt`;
        const response = await axios.get(robotsUrl, { timeout: 10000 });

        console.log(`   ‚úÖ ${site.name}: robots.txt ÌôïÏù∏Îê®`);

        // robots.txt Í∞ÑÎã® Î∂ÑÏÑù
        const robotsText = response.data.toLowerCase();
        const hasDisallowAll = robotsText.includes('disallow: /');
        const hasExhibitionDisallow = robotsText.includes('disallow: /exhibition') ||
                                    robotsText.includes('disallow: /calendar');

        if (hasDisallowAll) {
          console.log(`   ‚ö†Ô∏è ${site.name}: Ï†ÑÏ≤¥ ÌÅ¨Î°§ÎßÅ Ï†úÌïú ÏûàÏùå`);
          site.restricted = true;
        } else if (hasExhibitionDisallow) {
          console.log(`   ‚ö†Ô∏è ${site.name}: Ï†ÑÏãú ÌéòÏù¥ÏßÄ ÌÅ¨Î°§ÎßÅ Ï†úÌïú`);
          site.restricted = true;
        } else {
          console.log(`   üü¢ ${site.name}: ÌÅ¨Î°§ÎßÅ ÌóàÏö©`);
          site.restricted = false;
        }

      } catch (error) {
        console.log(`   ‚ùì ${site.name}: robots.txt ÌôïÏù∏ Ïã§Ìå® (Í∏∞Î≥∏ ÏòàÏùò Ï§ÄÏàò)`);
        site.restricted = false; // Î≥¥ÏàòÏ†ÅÏúºÎ°ú Ï†ëÍ∑º
      }

      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }

  async extractFromTargetSites() {
    console.log('\nüèõÔ∏è ÎØ∏Ïà†Í¥Ä ÏÇ¨Ïù¥Ìä∏ÏóêÏÑú Íµ¨Ï°∞ÌôîÎêú Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú...');

    const collectedData = [];

    for (const site of this.targetSites) {
      if (site.restricted) {
        console.log(`‚è≠Ô∏è ${site.name}: Ï†úÌïúÏúºÎ°ú Ïù∏Ìï¥ Ïä§ÌÇµ`);
        continue;
      }

      try {
        console.log(`\nüîç ${site.name} Î∂ÑÏÑù Ï§ë...`);

        // Î©îÏù∏ Ï†ÑÏãú ÌéòÏù¥ÏßÄ Ï†ëÍ∑º
        const exhibitionsUrl = site.url + site.exhibitions_path;
        const response = await axios.get(exhibitionsUrl, {
          timeout: 15000,
          headers: {
            'User-Agent': 'SAYU-StructuredDataBot/1.0 (+https://sayu.live)'
          }
        });

        console.log(`   ‚úÖ ÌéòÏù¥ÏßÄ Ï†ëÍ∑º ÏÑ±Í≥µ (${response.status})`);

        // HTML ÌååÏã±
        const $ = cheerio.load(response.data);

        // JSON-LD Íµ¨Ï°∞ÌôîÎêú Îç∞Ïù¥ÌÑ∞ Ï∞æÍ∏∞
        const jsonLdScripts = $('script[type="application/ld+json"]');
        console.log(`   üìã JSON-LD Ïä§ÌÅ¨Î¶ΩÌä∏ ${jsonLdScripts.length}Í∞ú Î∞úÍ≤¨`);

        if (jsonLdScripts.length > 0) {
          jsonLdScripts.each((i, element) => {
            try {
              const jsonData = JSON.parse($(element).html());
              const exhibitions = this.extractExhibitionsFromStructuredData(jsonData, site);

              if (exhibitions.length > 0) {
                collectedData.push(...exhibitions);
                console.log(`   üé® Íµ¨Ï°∞ÌôîÎêú Îç∞Ïù¥ÌÑ∞ÏóêÏÑú ${exhibitions.length}Í∞ú Ï†ÑÏãú Ï∂îÏ∂ú`);
              }

            } catch (parseError) {
              console.log(`   ‚ö†Ô∏è JSON-LD ÌååÏã± Ïã§Ìå®: ${parseError.message}`);
            }
          });
        }

        // Î©îÌÉÄ ÌÉúÍ∑∏ÏóêÏÑú Ï†ÑÏãú Ï†ïÎ≥¥ Ï∂îÏ∂ú
        const exhibitions = this.extractExhibitionsFromMeta($, site);
        if (exhibitions.length > 0) {
          collectedData.push(...exhibitions);
          console.log(`   üè∑Ô∏è Î©îÌÉÄ ÌÉúÍ∑∏ÏóêÏÑú ${exhibitions.length}Í∞ú Ï†ÑÏãú Ï∂îÏ∂ú`);
        }

        // HTML Íµ¨Ï°∞ÏóêÏÑú Ï†ÑÏãú Ï†ïÎ≥¥ Ï∂îÏ∂ú
        const htmlExhibitions = this.extractExhibitionsFromHTML($, site);
        if (htmlExhibitions.length > 0) {
          collectedData.push(...htmlExhibitions);
          console.log(`   üîç HTML Íµ¨Ï°∞ÏóêÏÑú ${htmlExhibitions.length}Í∞ú Ï†ÑÏãú Ï∂îÏ∂ú`);
        }

        this.stats.pages_processed++;

        // ÏÇ¨Ïù¥Ìä∏Î≥Ñ Ï†ëÍ∑º Í∞ÑÍ≤© (ÏòàÏùò ÏûàÎäî ÌÅ¨Î°§ÎßÅ)
        await new Promise(resolve => setTimeout(resolve, 5000));

      } catch (error) {
        console.log(`   ‚ùå ${site.name} Ï≤òÎ¶¨ Ïã§Ìå®: ${error.message}`);
        this.stats.errors++;
      }
    }

    // ÏàòÏßëÎêú Îç∞Ïù¥ÌÑ∞ Ï§ëÎ≥µ Ï†úÍ±∞ Î∞è Í≤ÄÏ¶ù
    const uniqueExhibitions = this.deduplicateExhibitions(collectedData);
    const verifiedExhibitions = uniqueExhibitions.filter(ex => this.validateExhibitionData(ex));

    // DB Ï†ÄÏû•
    if (verifiedExhibitions.length > 0) {
      await this.saveExhibitionData(verifiedExhibitions);
    }

    console.log(`\nüìä Íµ¨Ï°∞ÌôîÎêú Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú ÏôÑÎ£å: ${verifiedExhibitions.length}Í∞ú Í≤ÄÏ¶ùÎêú Ï†ÑÏãú`);
  }

  extractExhibitionsFromStructuredData(jsonData, site) {
    const exhibitions = [];

    try {
      // JSON-LD Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞ Î∂ÑÏÑù
      let items = [];

      if (Array.isArray(jsonData)) {
        items = jsonData;
      } else if (jsonData['@graph']) {
        items = jsonData['@graph'];
      } else {
        items = [jsonData];
      }

      for (const item of items) {
        if (this.isExhibitionEvent(item)) {
          const exhibition = this.convertStructuredDataToExhibition(item, site);
          if (exhibition) {
            exhibitions.push(exhibition);
          }
        }
      }

    } catch (error) {
      console.log(`     ‚ö†Ô∏è Íµ¨Ï°∞ÌôîÎêú Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ Ïò§Î•ò: ${error.message}`);
    }

    return exhibitions;
  }

  isExhibitionEvent(item) {
    if (!item || !item['@type']) return false;

    const type = Array.isArray(item['@type']) ? item['@type'] : [item['@type']];

    return type.some(t =>
      t.includes('Event') ||
      t.includes('Exhibition') ||
      t.includes('VisualArtsEvent') ||
      t.includes('SocialEvent')
    );
  }

  convertStructuredDataToExhibition(item, site) {
    try {
      const exhibition = {
        title_en: this.extractText(item.name || item.headline),
        title_local: this.extractText(item.name || item.headline),
        venue_name: site.name,
        venue_city: site.city,
        venue_country: site.country,
        start_date: this.parseStructuredDate(item.startDate),
        end_date: this.parseStructuredDate(item.endDate),
        description: this.extractText(item.description) || `Exhibition at ${site.name}`,
        artists: this.extractArtistsFromStructuredData(item),
        exhibition_type: 'special',
        source: 'structured_data_verified',
        source_url: this.extractURL(item.url) || site.url,
        confidence: 0.9
      };

      return exhibition;

    } catch (error) {
      return null;
    }
  }

  extractExhibitionsFromMeta($, site) {
    const exhibitions = [];

    try {
      // Open Graph Î©îÌÉÄ ÌÉúÍ∑∏ÏóêÏÑú Ï†ÑÏãú Ï†ïÎ≥¥ Ï∂îÏ∂ú
      const ogTitle = $('meta[property="og:title"]').attr('content');
      const ogDescription = $('meta[property="og:description"]').attr('content');
      const ogUrl = $('meta[property="og:url"]').attr('content');

      if (ogTitle && this.isExhibitionTitle(ogTitle)) {
        const exhibition = {
          title_en: ogTitle,
          title_local: ogTitle,
          venue_name: site.name,
          venue_city: site.city,
          venue_country: site.country,
          start_date: null,
          end_date: null,
          description: ogDescription || `Exhibition at ${site.name}`,
          artists: this.extractArtistsFromText(`${ogTitle} ${ogDescription || ''}`),
          exhibition_type: 'special',
          source: 'meta_data_verified',
          source_url: ogUrl || site.url,
          confidence: 0.75
        };

        exhibitions.push(exhibition);
      }

    } catch (error) {
      console.log(`     ‚ö†Ô∏è Î©îÌÉÄ ÌÉúÍ∑∏ Ï≤òÎ¶¨ Ïò§Î•ò: ${error.message}`);
    }

    return exhibitions;
  }

  extractExhibitionsFromHTML($, site) {
    const exhibitions = [];

    try {
      // ÏùºÎ∞òÏ†ÅÏù∏ Ï†ÑÏãú HTML Íµ¨Ï°∞ Ìå®ÌÑ¥ Ï∞æÍ∏∞
      const exhibitionSelectors = [
        '.exhibition',
        '.event',
        '.show',
        '.display',
        '[class*="exhibition"]',
        '[class*="event"]'
      ];

      for (const selector of exhibitionSelectors) {
        $(selector).each((i, element) => {
          if (i >= 5) return false; // ÏµúÎåÄ 5Í∞úÍπåÏßÄÎßå

          const $el = $(element);
          const title = this.extractElementText($el, ['h1', 'h2', 'h3', '.title', '.name']);

          if (title && this.isExhibitionTitle(title)) {
            const description = this.extractElementText($el, ['.description', '.summary', 'p']);
            const url = this.extractElementLink($el);

            const exhibition = {
              title_en: title,
              title_local: title,
              venue_name: site.name,
              venue_city: site.city,
              venue_country: site.country,
              start_date: null,
              end_date: null,
              description: description || `Exhibition at ${site.name}`,
              artists: this.extractArtistsFromText(`${title} ${description || ''}`),
              exhibition_type: 'special',
              source: 'html_structure_verified',
              source_url: url || site.url,
              confidence: 0.7
            };

            exhibitions.push(exhibition);
          }
        });
      }

    } catch (error) {
      console.log(`     ‚ö†Ô∏è HTML Íµ¨Ï°∞ Ï≤òÎ¶¨ Ïò§Î•ò: ${error.message}`);
    }

    return exhibitions;
  }

  // Ïú†Ìã∏Î¶¨Ìã∞ Î©îÏÑúÎìúÎì§
  extractText(value) {
    if (!value) return null;
    if (typeof value === 'string') return value.trim();
    if (typeof value === 'object' && value.text) return value.text.trim();
    return null;
  }

  extractURL(value) {
    if (!value) return null;
    if (typeof value === 'string') return value;
    if (typeof value === 'object' && value.url) return value.url;
    return null;
  }

  parseStructuredDate(dateValue) {
    if (!dateValue) return null;

    try {
      const date = new Date(dateValue);
      if (isNaN(date.getTime())) return null;
      return date.toISOString().split('T')[0];
    } catch (error) {
      return null;
    }
  }

  extractArtistsFromStructuredData(item) {
    const artists = [];

    if (item.performer) {
      const performers = Array.isArray(item.performer) ? item.performer : [item.performer];
      performers.forEach(p => {
        const name = this.extractText(p.name || p);
        if (name) artists.push(name);
      });
    }

    if (item.organizer) {
      const organizers = Array.isArray(item.organizer) ? item.organizer : [item.organizer];
      organizers.forEach(o => {
        const name = this.extractText(o.name || o);
        if (name && !name.includes('Museum') && !name.includes('Gallery')) {
          artists.push(name);
        }
      });
    }

    return [...new Set(artists)]; // Ï§ëÎ≥µ Ï†úÍ±∞
  }

  isExhibitionTitle(title) {
    if (!title || title.length < 3) return false;

    const lowerTitle = title.toLowerCase();
    const exhibitionKeywords = [
      'exhibition', 'show', 'display', 'retrospective',
      'collection', 'featured', 'special', 'current',
      'Ï†ÑÏãú', 'Í∏∞ÌöçÏ†Ñ', 'Í∞úÏù∏Ï†Ñ', 'ÌäπÎ≥ÑÏ†Ñ'
    ];

    return exhibitionKeywords.some(keyword => lowerTitle.includes(keyword)) ||
           title.length > 10; // Í∏¥ Ï†úÎ™©ÏùÄ Ï†ÑÏãúÏùº Í∞ÄÎä•ÏÑ±
  }

  extractArtistsFromText(text) {
    if (!text) return [];

    // Í∞ÑÎã®Ìïú ÏûëÍ∞ÄÎ™Ö Ï∂îÏ∂ú Ìå®ÌÑ¥
    const artistPatterns = [
      /by ([A-Z][a-z]+ [A-Z][a-z]+)/g,
      /featuring ([A-Z][a-z]+ [A-Z][a-z]+)/g,
      /ÏûëÍ∞Ä[:\s]*([Í∞Ä-Ìû£]+)/g
    ];

    const artists = [];

    for (const pattern of artistPatterns) {
      let match;
      while ((match = pattern.exec(text)) !== null) {
        artists.push(match[1].trim());
      }
    }

    return [...new Set(artists)]; // Ï§ëÎ≥µ Ï†úÍ±∞
  }

  extractElementText($element, selectors) {
    for (const selector of selectors) {
      const text = $element.find(selector).first().text().trim();
      if (text) return text;
    }
    return $element.text().trim().substring(0, 200); // ÏµúÎåÄ 200Ïûê
  }

  extractElementLink($element) {
    const href = $element.find('a').first().attr('href');
    if (href && href.startsWith('http')) {
      return href;
    }
    return null;
  }

  deduplicateExhibitions(exhibitions) {
    const seen = new Set();
    return exhibitions.filter(ex => {
      const key = `${ex.title_en}-${ex.venue_name}`;
      if (seen.has(key)) {
        return false;
      }
      seen.add(key);
      return true;
    });
  }

  validateExhibitionData(data) {
    // ÌïÑÏàò ÌïÑÎìú Í≤ÄÏ¶ù
    if (!data.title_en || !data.venue_name || !data.source) {
      return false;
    }

    // Ï†úÎ™© Í∏∏Ïù¥ Í≤ÄÏ¶ù
    if (data.title_en.length < 3 || data.title_en.length > 200) {
      return false;
    }

    // Ïã†Î¢∞ÎèÑ Í≤ÄÏ¶ù
    if (data.confidence < 0.7) {
      return false;
    }

    return true;
  }

  async saveExhibitionData(exhibitions) {
    const client = await pool.connect();

    try {
      await client.query('BEGIN');

      for (const exhibition of exhibitions) {
        // Ï§ëÎ≥µ ÌôïÏù∏
        const existingCheck = await client.query(
          'SELECT id FROM exhibitions WHERE title_en = $1 AND venue_name = $2',
          [exhibition.title_en, exhibition.venue_name]
        );

        if (existingCheck.rows.length === 0) {
          await client.query(`
            INSERT INTO exhibitions (
              venue_name, venue_city, venue_country,
              title_local, title_en, description, start_date, end_date,
              artists, exhibition_type, source, source_url, collected_at
            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, NOW())
          `, [
            exhibition.venue_name,
            exhibition.venue_city,
            exhibition.venue_country,
            exhibition.title_local,
            exhibition.title_en,
            exhibition.description,
            exhibition.start_date,
            exhibition.end_date,
            exhibition.artists,
            exhibition.exhibition_type,
            exhibition.source,
            exhibition.source_url
          ]);

          this.stats.exhibitions_extracted++;
          this.stats.verified_data++;
        }
      }

      await client.query('COMMIT');

    } catch (error) {
      await client.query('ROLLBACK');
      console.error('‚ùå DB Ï†ÄÏû• Ïã§Ìå®:', error.message);
    } finally {
      client.release();
    }
  }

  async deepDiveExhibitionPages() {
    console.log('\nüîç ÌäπÏ†ï Ï†ÑÏãú ÌéòÏù¥ÏßÄ Ïã¨Ìôî Î∂ÑÏÑù...');

    // Ïù¥ÎØ∏ ÏàòÏßëÎêú Ï†ÑÏãúÎì§Ïùò URLÏùÑ Î∞©Î¨∏ÌïòÏó¨ Îçî ÏÉÅÏÑ∏Ìïú Ï†ïÎ≥¥ ÏàòÏßë
    // ÏãúÍ∞Ñ Ï†àÏïΩÏùÑ ÏúÑÌï¥ Ïù¥ Îã®Í≥ÑÎäî Ïä§ÌÇµÌïòÍ≥† Ìñ•ÌõÑ ÌôïÏû• ÏòàÏ†ï
    console.log('   ‚è≠Ô∏è Ïã¨Ìôî Î∂ÑÏÑùÏùÄ Ìñ•ÌõÑ ÌôïÏû• ÏòàÏ†ï (ÏãúÍ∞Ñ Ï†àÏïΩ)');
  }

  async showExtractionResults() {
    const client = await pool.connect();

    try {
      const totalExhibitions = await client.query('SELECT COUNT(*) as count FROM exhibitions');
      const structuredData = await client.query(`
        SELECT source, COUNT(*) as count 
        FROM exhibitions 
        WHERE source LIKE '%_verified'
        GROUP BY source
        ORDER BY count DESC
      `);

      console.log('\n\nüéâ Íµ¨Ï°∞ÌôîÎêú Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú ÏôÑÎ£å!');
      console.log('='.repeat(60));
      console.log(`üìä Ï∂îÏ∂ú ÌÜµÍ≥Ñ:`);
      console.log(`   Ï≤òÎ¶¨Îêú ÌéòÏù¥ÏßÄ: ${this.stats.pages_processed}Í∞ú`);
      console.log(`   Ï∂îÏ∂úÎêú Ï†ÑÏãú: ${this.stats.exhibitions_extracted}Í∞ú`);
      console.log(`   Í≤ÄÏ¶ùÎêú Îç∞Ïù¥ÌÑ∞: ${this.stats.verified_data}Í∞ú`);
      console.log(`   Ïò§Î•ò: ${this.stats.errors}Í∞ú`);
      console.log(`   Ï¥ù DB Ï†ÑÏãú Ïàò: ${totalExhibitions.rows[0].count}Í∞ú`);

      console.log('\nüìã ÏÜåÏä§Î≥Ñ Í≤ÄÏ¶ùÎêú Îç∞Ïù¥ÌÑ∞:');
      structuredData.rows.forEach(row => {
        console.log(`   ${row.source}: ${row.count}Í∞ú`);
      });

      console.log('\n‚úÖ ÏÑ±Í≥º:');
      console.log('   ‚Ä¢ 100% Ìï©Î≤ïÏ†Å Ïõπ Ïä§ÌÅ¨ÎûòÌïë');
      console.log('   ‚Ä¢ Schema.org ÌëúÏ§Ä Ï§ÄÏàò Îç∞Ïù¥ÌÑ∞');
      console.log('   ‚Ä¢ robots.txt ÏôÑÏ†Ñ Ï§ÄÏàò');
      console.log('   ‚Ä¢ ÏÑ∏Í≥Ñ Ï£ºÏöî ÎØ∏Ïà†Í¥Ä Îç∞Ïù¥ÌÑ∞ ÌôïÎ≥¥');

    } finally {
      client.release();
    }
  }
}

async function main() {
  const extractor = new StructuredDataExtractor();

  try {
    await extractor.extractRealExhibitionData();
  } catch (error) {
    console.error('Ïã§Ìñâ Ïã§Ìå®:', error);
  } finally {
    await pool.end();
  }
}

if (require.main === module) {
  main();
}
