#!/usr/bin/env node
require('dotenv').config();
const { Pool } = require('pg');

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

async function showAllExhibitions() {
  const client = await pool.connect();

  try {
    console.log('üé® SAYU Ï†ÑÏãú Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï†ÑÏ≤¥ Î™©Î°ù\n');
    console.log('='.repeat(100));

    // Ï†ÑÏ≤¥ Ï†ÑÏãú Ï°∞Ìöå
    const result = await client.query(`
      SELECT 
        id,
        title_en,
        title_local,
        venue_name,
        venue_city,
        start_date,
        end_date,
        description,
        source,
        collected_at,
        CASE 
          WHEN end_date < CURRENT_DATE THEN 'Ï¢ÖÎ£å'
          WHEN start_date > CURRENT_DATE THEN 'ÏòàÏ†ï'
          ELSE 'ÏßÑÌñâÏ§ë'
        END as status
      FROM exhibitions
      ORDER BY start_date DESC, title_en
    `);

    console.log(`Ï¥ù ${result.rows.length}Í∞úÏùò Ï†ÑÏãú\n`);

    // ÏÉÅÌÉúÎ≥Ñ Î∂ÑÎ•ò
    const ongoing = result.rows.filter(ex => ex.status === 'ÏßÑÌñâÏ§ë');
    const upcoming = result.rows.filter(ex => ex.status === 'ÏòàÏ†ï');
    const ended = result.rows.filter(ex => ex.status === 'Ï¢ÖÎ£å');

    // ÏßÑÌñâ Ï§ëÏù∏ Ï†ÑÏãú
    console.log(`\nüü¢ ÌòÑÏû¨ ÏßÑÌñâ Ï§ëÏù∏ Ï†ÑÏãú (${ongoing.length}Í∞ú)`);
    console.log('='.repeat(100));
    ongoing.forEach((ex, idx) => {
      console.log(`\n${idx + 1}. ${ex.title_en}`);
      if (ex.title_local !== ex.title_en) {
        console.log(`   (${ex.title_local})`);
      }
      console.log(`   üìç Ïû•ÏÜå: ${ex.venue_name} (${ex.venue_city})`);
      console.log(`   üìÖ Í∏∞Í∞Ñ: ${formatDate(ex.start_date)} ~ ${formatDate(ex.end_date)}`);
      if (ex.description) {
        console.log(`   üìù ÏÑ§Î™Ö: ${ex.description.substring(0, 100)}${ex.description.length > 100 ? '...' : ''}`);
      }
      console.log(`   üè∑Ô∏è Ï∂úÏ≤ò: ${ex.source}`);
    });

    // ÏòàÏ†ïÎêú Ï†ÑÏãú
    if (upcoming.length > 0) {
      console.log(`\n\nüîµ ÏòàÏ†ïÎêú Ï†ÑÏãú (${upcoming.length}Í∞ú)`);
      console.log('='.repeat(100));
      upcoming.forEach((ex, idx) => {
        console.log(`\n${idx + 1}. ${ex.title_en}`);
        console.log(`   üìç Ïû•ÏÜå: ${ex.venue_name} (${ex.venue_city})`);
        console.log(`   üìÖ Í∏∞Í∞Ñ: ${formatDate(ex.start_date)} ~ ${formatDate(ex.end_date)}`);
        if (ex.description) {
          console.log(`   üìù ÏÑ§Î™Ö: ${ex.description.substring(0, 100)}${ex.description.length > 100 ? '...' : ''}`);
        }
        console.log(`   üè∑Ô∏è Ï∂úÏ≤ò: ${ex.source}`);
      });
    }

    // Ï¢ÖÎ£åÎêú Ï†ÑÏãú (ÏµúÍ∑º 10Í∞úÎßå)
    if (ended.length > 0) {
      console.log('\n\n‚ö´ ÏµúÍ∑º Ï¢ÖÎ£åÎêú Ï†ÑÏãú (ÏµúÍ∑º 10Í∞ú)');
      console.log('='.repeat(100));
      ended.slice(0, 10).forEach((ex, idx) => {
        console.log(`\n${idx + 1}. ${ex.title_en}`);
        console.log(`   üìç Ïû•ÏÜå: ${ex.venue_name} (${ex.venue_city})`);
        console.log(`   üìÖ Í∏∞Í∞Ñ: ${formatDate(ex.start_date)} ~ ${formatDate(ex.end_date)}`);
        console.log(`   üè∑Ô∏è Ï∂úÏ≤ò: ${ex.source}`);
      });
    }

    // ÌÜµÍ≥Ñ Ï†ïÎ≥¥
    console.log('\n\nüìä ÌÜµÍ≥Ñ Ï†ïÎ≥¥');
    console.log('='.repeat(100));

    // ÎèÑÏãúÎ≥Ñ ÌÜµÍ≥Ñ
    const cityStats = await client.query(`
      SELECT venue_city, COUNT(*) as count
      FROM exhibitions
      GROUP BY venue_city
      ORDER BY count DESC
    `);

    console.log('\nÎèÑÏãúÎ≥Ñ Ï†ÑÏãú Î∂ÑÌè¨:');
    cityStats.rows.forEach(row => {
      const bar = '‚ñà'.repeat(Math.min(row.count, 40));
      console.log(`${row.venue_city.padEnd(10)} ${bar} ${row.count}Í∞ú`);
    });

    // ÏõîÎ≥Ñ Ï†ÑÏãú ÏãúÏûë
    const monthStats = await client.query(`
      SELECT 
        TO_CHAR(start_date, 'YYYY-MM') as month,
        COUNT(*) as count
      FROM exhibitions
      WHERE start_date >= '2025-01-01'
      GROUP BY TO_CHAR(start_date, 'YYYY-MM')
      ORDER BY month
    `);

    console.log('\n\n2025ÎÖÑ ÏõîÎ≥Ñ Ï†ÑÏãú ÏãúÏûë:');
    monthStats.rows.forEach(row => {
      const bar = '‚ñà'.repeat(Math.min(row.count * 2, 40));
      console.log(`${row.month} ${bar} ${row.count}Í∞ú`);
    });

    // Ï£ºÏöî ÎØ∏Ïà†Í¥ÄÎ≥Ñ Ï†ÑÏãú
    const venueStats = await client.query(`
      SELECT venue_name, COUNT(*) as count
      FROM exhibitions
      GROUP BY venue_name
      HAVING COUNT(*) > 1
      ORDER BY count DESC
      LIMIT 10
    `);

    console.log('\n\nÏ£ºÏöî Ï†ÑÏãú Ïû•ÏÜå (2Í∞ú Ïù¥ÏÉÅ Ï†ÑÏãú):');
    venueStats.rows.forEach(row => {
      console.log(`${row.venue_name}: ${row.count}Í∞ú`);
    });

  } catch (error) {
    console.error('Ïò§Î•ò:', error.message);
  } finally {
    client.release();
  }

  process.exit(0);
}

function formatDate(date) {
  if (!date) return 'ÎØ∏Ï†ï';
  const d = new Date(date);
  return `${d.getFullYear()}.${String(d.getMonth() + 1).padStart(2, '0')}.${String(d.getDate()).padStart(2, '0')}`;
}

showAllExhibitions();
