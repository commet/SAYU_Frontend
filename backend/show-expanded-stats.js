#!/usr/bin/env node
require('dotenv').config();

const { Pool } = require('pg');

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

async function showExpandedStats() {
  const client = await pool.connect();

  try {
    console.log('üåç SAYU ÌôïÏû•Îêú ÎØ∏Ïà†Í¥Ä Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÌòÑÌô©');
    console.log('='.repeat(80));

    // Ï†ÑÏ≤¥ ÌÜµÍ≥Ñ
    const overallStats = await client.query(`
      SELECT 
        COUNT(*) as total_venues,
        COUNT(DISTINCT country) as total_countries,
        COUNT(DISTINCT city) as total_cities,
        COUNT(CASE WHEN tier = 1 THEN 1 END) as tier1,
        COUNT(CASE WHEN tier = 2 THEN 1 END) as tier2,
        COUNT(CASE WHEN tier = 3 THEN 1 END) as tier3
      FROM venues
    `);

    console.log('\nüìä Ï†ÑÏ≤¥ ÌÜµÍ≥Ñ:');
    console.log(`   Ï¥ù ÎØ∏Ïà†Í¥Ä/Í∞§Îü¨Î¶¨: ${overallStats.rows[0].total_venues}Í∞ú`);
    console.log(`   Ï¥ù Íµ≠Í∞Ä: ${overallStats.rows[0].total_countries}Í∞ú`);
    console.log(`   Ï¥ù ÎèÑÏãú: ${overallStats.rows[0].total_cities}Í∞ú`);
    console.log(`   Tier 1 (ÎåÄÌòï): ${overallStats.rows[0].tier1}Í∞ú`);
    console.log(`   Tier 2 (Ï§ëÌòï): ${overallStats.rows[0].tier2}Í∞ú`);
    console.log(`   Tier 3 (ÏÜåÌòï): ${overallStats.rows[0].tier3}Í∞ú`);

    // Íµ≠Í∞ÄÎ≥Ñ ÏÉÅÏÑ∏
    const countryDetails = await client.query(`
      SELECT 
        country,
        COUNT(*) as venue_count,
        COUNT(DISTINCT city) as city_count,
        STRING_AGG(DISTINCT city, ', ' ORDER BY city) as cities
      FROM venues
      GROUP BY country
      ORDER BY venue_count DESC
    `);

    console.log('\n\nüåè Íµ≠Í∞ÄÎ≥Ñ ÏÉÅÏÑ∏ ÌòÑÌô©:');
    console.log('='.repeat(80));

    const countryEmojis = {
      'KR': 'üá∞üá∑', 'US': 'üá∫üá∏', 'GB': 'üá¨üáß', 'JP': 'üáØüáµ', 'HK': 'üá≠üá∞',
      'CN': 'üá®üá≥', 'FR': 'üá´üá∑', 'DE': 'üá©üá™', 'SG': 'üá∏üá¨', 'IT': 'üáÆüáπ',
      'ES': 'üá™üá∏', 'BR': 'üáßüá∑', 'CA': 'üá®üá¶', 'AU': 'üá¶üá∫', 'NL': 'üá≥üá±',
      'MX': 'üá≤üáΩ', 'AE': 'üá¶üá™', 'IN': 'üáÆüá≥', 'NZ': 'üá≥üáø', 'RU': 'üá∑üá∫',
      'AT': 'üá¶üáπ', 'AR': 'üá¶üá∑', 'ZA': 'üáøüá¶', 'TH': 'üáπüá≠', 'EG': 'üá™üá¨'
    };

    countryDetails.rows.forEach((country, index) => {
      const emoji = countryEmojis[country.country] || '';
      console.log(`\n${index + 1}. ${emoji} ${country.country}: ${country.venue_count}Í∞ú Í∏∞Í¥Ä, ${country.city_count}Í∞ú ÎèÑÏãú`);
      console.log(`   ÎèÑÏãú: ${country.cities}`);
    });

    // ÌïúÍµ≠ ÎèÑÏãúÎ≥Ñ ÏÉÅÏÑ∏
    const koreaDetails = await client.query(`
      SELECT 
        city,
        COUNT(*) as venue_count,
        STRING_AGG(name, ', ' ORDER BY name) as venues
      FROM venues
      WHERE country = 'KR'
      GROUP BY city
      ORDER BY venue_count DESC
    `);

    console.log('\n\nüá∞üá∑ ÌïúÍµ≠ ÎèÑÏãúÎ≥Ñ ÏÉÅÏÑ∏:');
    console.log('='.repeat(80));

    koreaDetails.rows.forEach((city, index) => {
      console.log(`\n${index + 1}. ${city.city}: ${city.venue_count}Í∞ú`);
      if (city.venue_count <= 5) {
        console.log(`   ${city.venues}`);
      } else {
        const venueList = city.venues.split(', ');
        console.log(`   ${venueList.slice(0, 5).join(', ')} ... Ïô∏ ${city.venue_count - 5}Í∞ú`);
      }
    });

    // Ï£ºÏöî Í∞§Îü¨Î¶¨ Ï≤¥Ïù∏
    const galleryChains = await client.query(`
      SELECT 
        CASE 
          WHEN name LIKE '%Gagosian%' THEN 'Gagosian'
          WHEN name LIKE '%Pace%' THEN 'Pace Gallery'
          WHEN name LIKE '%Perrotin%' THEN 'Perrotin'
          WHEN name LIKE '%White Cube%' THEN 'White Cube'
          WHEN name LIKE '%Hauser%Wirth%' THEN 'Hauser & Wirth'
          WHEN name LIKE '%Í∞§Îü¨Î¶¨ÌòÑÎåÄ%' THEN 'Í∞§Îü¨Î¶¨ÌòÑÎåÄ'
          WHEN name LIKE '%Íµ≠Ï†úÍ∞§Îü¨Î¶¨%' THEN 'Íµ≠Ï†úÍ∞§Îü¨Î¶¨'
          WHEN name LIKE '%ÌéòÏù¥Ïä§%' THEN 'ÌéòÏù¥Ïä§Í∞§Îü¨Î¶¨'
        END as chain,
        COUNT(*) as locations,
        STRING_AGG(city || ' (' || country || ')', ', ' ORDER BY city) as cities
      FROM venues
      WHERE name LIKE ANY(ARRAY['%Gagosian%', '%Pace%', '%Perrotin%', '%White Cube%', 
                                '%Hauser%Wirth%', '%Í∞§Îü¨Î¶¨ÌòÑÎåÄ%', '%Íµ≠Ï†úÍ∞§Îü¨Î¶¨%', '%ÌéòÏù¥Ïä§%'])
      GROUP BY chain
      ORDER BY locations DESC
    `);

    console.log('\n\nüè¢ Ï£ºÏöî Í∞§Îü¨Î¶¨ Ï≤¥Ïù∏:');
    console.log('='.repeat(80));

    galleryChains.rows.forEach(chain => {
      if (chain.chain) {
        console.log(`\n${chain.chain}: ${chain.locations}Í∞ú ÏßÄÏ†ê`);
        console.log(`   ÏúÑÏπò: ${chain.cities}`);
      }
    });

    // Ï†ÑÏãú ÌòÑÌô©
    const exhibitionStats = await client.query(`
      SELECT 
        COUNT(*) as total_exhibitions,
        COUNT(DISTINCT venue_id) as venues_with_exhibitions,
        (SELECT COUNT(*) FROM venues) - COUNT(DISTINCT venue_id) as venues_without_exhibitions
      FROM exhibitions
    `);

    console.log('\n\nüé® Ï†ÑÏãú ÌòÑÌô©:');
    console.log('='.repeat(80));
    console.log(`   Ï¥ù Ï†ÑÏãú: ${exhibitionStats.rows[0].total_exhibitions}Í∞ú`);
    console.log(`   Ï†ÑÏãú ÏûàÎäî Í∏∞Í¥Ä: ${exhibitionStats.rows[0].venues_with_exhibitions}Í∞ú`);
    console.log(`   Ï†ÑÏãú ÏóÜÎäî Í∏∞Í¥Ä: ${exhibitionStats.rows[0].venues_without_exhibitions}Í∞ú`);

    // Ïã†Í∑ú Ï∂îÍ∞ÄÎêú Ï£ºÏöî Í∞§Îü¨Î¶¨
    const newMajorGalleries = await client.query(`
      SELECT name, city, country, tier
      FROM venues
      WHERE created_at::date = CURRENT_DATE
        AND tier = 1
      ORDER BY name
      LIMIT 20
    `);

    if (newMajorGalleries.rows.length > 0) {
      console.log('\n\n‚ú® Ïò§Îäò Ï∂îÍ∞ÄÎêú Ï£ºÏöî Í∞§Îü¨Î¶¨ (Tier 1):');
      console.log('='.repeat(80));

      newMajorGalleries.rows.forEach(gallery => {
        const emoji = countryEmojis[gallery.country] || '';
        console.log(`   ‚Ä¢ ${gallery.name} - ${gallery.city}, ${emoji} ${gallery.country}`);
      });
    }

  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    client.release();
    await pool.end();
  }
}

if (require.main === module) {
  showExpandedStats();
}
