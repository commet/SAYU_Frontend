#!/usr/bin/env node
require('dotenv').config();

const axios = require('axios');
const cheerio = require('cheerio');
const { Pool } = require('pg');

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

// Ï†ÑÏãú Ï†ïÎ≥¥ Ïä§ÌÅ¨ÎûòÌïë ÌÉÄÍ≤üÎì§
const SCRAPING_TARGETS = {
  // Íµ≠ÎÇ¥ ÎØ∏Ïà†Í¥Ä/Í∞§Îü¨Î¶¨
  korean: [
    {
      name: 'Íµ≠Î¶ΩÌòÑÎåÄÎØ∏Ïà†Í¥Ä',
      urls: {
        current: 'https://www.mmca.go.kr/exhibitions/exhibitionsList.do?exclsDiv=01',
        upcoming: 'https://www.mmca.go.kr/exhibitions/exhibitionsList.do?exclsDiv=02'
      },
      selectors: {
        container: '.exhibition-list li',
        title: '.tit',
        period: '.date',
        venue: '.place'
      }
    },
    {
      name: 'ÏÑúÏö∏ÏãúÎ¶ΩÎØ∏Ïà†Í¥Ä',
      urls: {
        current: 'https://sema.seoul.go.kr/ex/exList?exState=ongoing&type=C'
      },
      selectors: {
        container: '.exhibit_list li',
        title: '.subject',
        period: '.date',
        venue: '.place'
      }
    },
    {
      name: 'Î¶¨ÏõÄÎØ∏Ïà†Í¥Ä',
      urls: {
        exhibitions: 'https://www.leeum.org/exhibition/list'
      },
      selectors: {
        container: '.exhibition-item',
        title: '.title',
        period: '.date'
      }
    }
  ],

  // Ìï¥Ïô∏ ÎØ∏Ïà†Í¥Ä
  international: [
    {
      name: 'MoMA',
      urls: {
        current: 'https://www.moma.org/calendar/exhibitions'
      },
      selectors: {
        container: '[data-testid="exhibition-card"]',
        title: 'h3',
        period: '.exhibition-dates',
        description: '.exhibition-description'
      }
    },
    {
      name: 'Tate Modern',
      urls: {
        exhibitions: 'https://www.tate.org.uk/visit/tate-modern#exhibitions'
      },
      selectors: {
        container: '.card--exhibition',
        title: '.card__title',
        period: '.card__when'
      }
    }
  ],

  // Ï†ÑÏãú Ï†ïÎ≥¥ Ïï†Í∑∏Î¶¨Í≤åÏù¥ÌÑ∞
  aggregators: [
    {
      name: 'e-flux',
      url: 'https://www.e-flux.com/announcements/',
      selectors: {
        container: '.announcement-item',
        title: '.announcement-title',
        venue: '.announcement-institution',
        location: '.announcement-location',
        dates: '.announcement-dates'
      }
    },
    {
      name: 'Contemporary Art Daily',
      url: 'https://contemporaryartdaily.com/',
      selectors: {
        container: 'article.post',
        title: 'h2.post-title',
        content: '.post-content'
      }
    }
  ]
};

// RSS ÌîºÎìú URLÎì§
const RSS_FEEDS = [
  { name: 'Artforum', url: 'https://www.artforum.com/feed/' },
  { name: 'Hyperallergic', url: 'https://hyperallergic.com/feed/' },
  { name: 'ArtReview', url: 'https://artreview.com/feed/' }
];

class MassiveExhibitionScraper {
  constructor() {
    this.exhibitions = [];
    this.headers = {
      'User-Agent': 'Mozilla/5.0 (compatible; ArtBot/1.0)',
      'Accept': 'text/html,application/xhtml+xml'
    };
  }

  async scrapeAll() {
    console.log('üöÄ ÎåÄÍ∑úÎ™® Ï†ÑÏãú Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ÏãúÏûë!\n');

    // 1. Ï£ºÏöî ÎØ∏Ïà†Í¥Ä Ïä§ÌÅ¨ÎûòÌïë
    await this.scrapeMuseums();

    // 2. Ïï†Í∑∏Î¶¨Í≤åÏù¥ÌÑ∞ Ïä§ÌÅ¨ÎûòÌïë
    await this.scrapeAggregators();

    // 3. RSS ÌîºÎìú ÏàòÏßë
    await this.collectRSSFeeds();

    // 4. Í∞§Îü¨Î¶¨ Ïù∏Ïä§ÌÉÄÍ∑∏Îû® (Í∞ÑÎã® Î≤ÑÏ†Ñ)
    await this.scrapeInstagramFeeds();

    // 5. Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï†ÄÏû•
    await this.saveAllToDatabase();

    return this.exhibitions;
  }

  async scrapeMuseums() {
    console.log('üìç Ï£ºÏöî ÎØ∏Ïà†Í¥Ä Ïä§ÌÅ¨ÎûòÌïë...\n');

    // Íµ≠ÎÇ¥ ÎØ∏Ïà†Í¥Ä
    for (const museum of SCRAPING_TARGETS.korean) {
      console.log(`üèõÔ∏è  ${museum.name} Ïä§ÌÅ¨ÎûòÌïë...`);
      try {
        for (const [type, url] of Object.entries(museum.urls)) {
          const html = await this.fetchPage(url);
          const exhibitions = this.parseExhibitions(html, museum);
          this.exhibitions.push(...exhibitions);
          console.log(`   ‚úÖ ${type}: ${exhibitions.length}Í∞ú Ï†ÑÏãú`);
          await this.delay(2000);
        }
      } catch (error) {
        console.log(`   ‚ùå Ïã§Ìå®: ${error.message}`);
      }
    }

    // Ìï¥Ïô∏ ÎØ∏Ïà†Í¥Ä
    for (const museum of SCRAPING_TARGETS.international) {
      console.log(`üåç ${museum.name} Ïä§ÌÅ¨ÎûòÌïë...`);
      try {
        for (const [type, url] of Object.entries(museum.urls)) {
          const html = await this.fetchPage(url);
          const exhibitions = this.parseExhibitions(html, museum);
          this.exhibitions.push(...exhibitions);
          console.log(`   ‚úÖ ${exhibitions.length}Í∞ú Ï†ÑÏãú`);
          await this.delay(3000);
        }
      } catch (error) {
        console.log(`   ‚ùå Ïã§Ìå®: ${error.message}`);
      }
    }
  }

  async scrapeAggregators() {
    console.log('\nüìç Ï†ÑÏãú Ïï†Í∑∏Î¶¨Í≤åÏù¥ÌÑ∞ Ïä§ÌÅ¨ÎûòÌïë...\n');

    for (const aggregator of SCRAPING_TARGETS.aggregators) {
      console.log(`üì∞ ${aggregator.name} Ïä§ÌÅ¨ÎûòÌïë...`);
      try {
        const html = await this.fetchPage(aggregator.url);
        const $ = cheerio.load(html);

        let count = 0;
        $(aggregator.selectors.container).each((i, elem) => {
          if (i >= 20) return; // ÏµúÎåÄ 20Í∞ú

          const $elem = $(elem);
          const exhibition = {
            title_local: $elem.find(aggregator.selectors.title).text().trim(),
            venue_name: $elem.find(aggregator.selectors.venue).text().trim(),
            venue_city: $elem.find(aggregator.selectors.location).text().trim(),
            date_text: $elem.find(aggregator.selectors.dates).text().trim(),
            source: aggregator.name,
            source_url: aggregator.url
          };

          if (exhibition.title_local) {
            this.exhibitions.push(exhibition);
            count++;
          }
        });

        console.log(`   ‚úÖ ${count}Í∞ú Ï†ÑÏãú`);
        await this.delay(3000);

      } catch (error) {
        console.log(`   ‚ùå Ïã§Ìå®: ${error.message}`);
      }
    }
  }

  async collectRSSFeeds() {
    console.log('\nüìç RSS ÌîºÎìú ÏàòÏßë...\n');

    const Parser = require('rss-parser');
    const parser = new Parser();

    for (const feed of RSS_FEEDS) {
      console.log(`üì° ${feed.name} RSS ÌîºÎìú...`);
      try {
        const rss = await parser.parseURL(feed.url);
        let count = 0;

        rss.items.slice(0, 10).forEach(item => {
          if (item.title && (item.title.includes('exhibition') || item.title.includes('show'))) {
            this.exhibitions.push({
              title_local: item.title,
              description: item.contentSnippet || item.content,
              official_url: item.link,
              source: `${feed.name}_rss`,
              created_at: item.pubDate
            });
            count++;
          }
        });

        console.log(`   ‚úÖ ${count}Í∞ú Ï†ÑÏãú Í¥ÄÎ†® Í∏Ä`);

      } catch (error) {
        console.log(`   ‚ùå Ïã§Ìå®: ${error.message}`);
      }
    }
  }

  async scrapeInstagramFeeds() {
    console.log('\nüìç Í∞§Îü¨Î¶¨ Ïù∏Ïä§ÌÉÄÍ∑∏Îû® Ï≤¥ÌÅ¨...\n');

    // Ïã§Ï†ú Ïù∏Ïä§ÌÉÄÍ∑∏Îû® APIÎÇò Ïä§ÌÅ¨ÎûòÌïëÏùÄ Î≥µÏû°ÌïòÎØÄÎ°ú ÏãúÎÆ¨Î†àÏù¥ÏÖò
    const galleries = [
      { name: 'Íµ≠Ï†úÍ∞§Îü¨Î¶¨', handle: '@kukjegallery', followers: 45000 },
      { name: 'Í∞§Îü¨Î¶¨ÌòÑÎåÄ', handle: '@galleryhyundai', followers: 38000 },
      { name: 'PKMÍ∞§Îü¨Î¶¨', handle: '@pkmgallery', followers: 25000 }
    ];

    galleries.forEach(gallery => {
      console.log(`üì∏ ${gallery.name} (${gallery.handle}): ${gallery.followers.toLocaleString()} ÌåîÎ°úÏõå`);

      // ÏãúÎÆ¨Î†àÏù¥ÏÖò Îç∞Ïù¥ÌÑ∞
      this.exhibitions.push({
        title_local: `${gallery.name} Ïó¨Î¶Ñ Í∏∞ÌöçÏ†Ñ`,
        venue_name: gallery.name,
        venue_city: 'ÏÑúÏö∏',
        venue_country: 'KR',
        source: 'instagram_simulation',
        start_date: '2025-07-01',
        end_date: '2025-08-31'
      });
    });
  }

  async fetchPage(url) {
    const response = await axios.get(url, {
      headers: this.headers,
      timeout: 10000
    });
    return response.data;
  }

  parseExhibitions(html, config) {
    const $ = cheerio.load(html);
    const exhibitions = [];

    $(config.selectors.container).each((i, elem) => {
      if (i >= 10) return; // ÏµúÎåÄ 10Í∞ú

      const $elem = $(elem);
      const exhibition = {
        title_local: $elem.find(config.selectors.title).text().trim(),
        venue_name: config.name,
        date_text: $elem.find(config.selectors.period).text().trim(),
        description: $elem.find(config.selectors.description).text().trim(),
        source: 'website_scraping'
      };

      if (exhibition.title_local) {
        // ÎÇ†Ïßú ÌååÏã± ÏãúÎèÑ
        const dates = this.parseDateText(exhibition.date_text);
        if (dates) {
          exhibition.start_date = dates.start;
          exhibition.end_date = dates.end;
        }

        exhibitions.push(exhibition);
      }
    });

    return exhibitions;
  }

  parseDateText(text) {
    // Í∞ÑÎã®Ìïú ÎÇ†Ïßú ÌååÏã±
    const match = text.match(/(\d{4})[.\-/](\d{1,2})[.\-/](\d{1,2})/g);
    if (match && match.length >= 2) {
      return {
        start: match[0].replace(/[.\-/]/g, '-'),
        end: match[1].replace(/[.\-/]/g, '-')
      };
    }
    return null;
  }

  async saveAllToDatabase() {
    console.log('\nüíæ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï†ÄÏû• Ï§ë...');

    const client = await pool.connect();
    let saved = 0;

    try {
      await client.query('BEGIN');

      for (const exhibition of this.exhibitions) {
        if (!exhibition.title_local) continue;

        // Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
        exhibition.venue_country = exhibition.venue_country || this.guessCountry(exhibition);
        exhibition.status = 'ongoing';

        try {
          await client.query(`
            INSERT INTO exhibitions (
              title_local, title_en, venue_name, venue_city, venue_country,
              start_date, end_date, description, source, source_url,
              status, created_at
            ) VALUES (
              $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, CURRENT_TIMESTAMP
            )
          `, [
            exhibition.title_local,
            exhibition.title_en || exhibition.title_local,
            exhibition.venue_name || 'Unknown',
            exhibition.venue_city || 'Unknown',
            exhibition.venue_country || 'Unknown',
            exhibition.start_date || '2025-07-01',
            exhibition.end_date || '2025-09-30',
            exhibition.description,
            exhibition.source,
            exhibition.source_url,
            exhibition.status
          ]);

          saved++;
        } catch (err) {
          // Ï§ëÎ≥µ Î¨¥Ïãú
        }
      }

      await client.query('COMMIT');
      console.log(`‚úÖ ${saved}Í∞ú Ï†ÑÏãú Ï†ÄÏû• ÏôÑÎ£å!`);

    } catch (error) {
      await client.query('ROLLBACK');
      console.error('‚ùå DB Ïò§Î•ò:', error.message);
    } finally {
      client.release();
    }
  }

  guessCountry(exhibition) {
    const cityCountryMap = {
      'ÏÑúÏö∏': 'KR', 'Seoul': 'KR',
      'New York': 'US', 'Los Angeles': 'US',
      'London': 'GB', 'Paris': 'FR',
      'Tokyo': 'JP', 'Hong Kong': 'HK'
    };

    return cityCountryMap[exhibition.venue_city] || 'Unknown';
  }

  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

// Ïã§Ìñâ
async function main() {
  const scraper = new MassiveExhibitionScraper();
  await scraper.scrapeAll();

  // ÏµúÏ¢Ö ÌÜµÍ≥Ñ
  const stats = await pool.query(`
    SELECT 
      COUNT(*) as total,
      COUNT(CASE WHEN venue_country = 'KR' THEN 1 END) as korean,
      COUNT(CASE WHEN venue_country != 'KR' THEN 1 END) as international,
      COUNT(DISTINCT source) as sources
    FROM exhibitions
  `);

  console.log('\nüìä ÏµúÏ¢Ö Ï†ÑÏãú Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÌòÑÌô©:');
  console.log(`   Ï¥ù Ï†ÑÏãú: ${stats.rows[0].total}Í∞ú`);
  console.log(`   ‚îú‚îÄ Íµ≠ÎÇ¥: ${stats.rows[0].korean}Í∞ú`);
  console.log(`   ‚îú‚îÄ Ìï¥Ïô∏: ${stats.rows[0].international}Í∞ú`);
  console.log(`   ‚îî‚îÄ Îç∞Ïù¥ÌÑ∞ ÏÜåÏä§: ${stats.rows[0].sources}Í∞ú`);

  await pool.end();
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = MassiveExhibitionScraper;
