#!/usr/bin/env node
require('dotenv').config();

const { Pool } = require('pg');

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

async function showAllMuseumsAndExhibitions() {
  const client = await pool.connect();

  try {
    // 1. Ï†ÑÏ≤¥ ÌÜµÍ≥Ñ
    const overallStats = await client.query(`
      SELECT 
        COUNT(DISTINCT venue_name) as total_venues,
        COUNT(DISTINCT venue_country) as total_countries,
        COUNT(*) as total_exhibitions,
        COUNT(CASE WHEN status = 'current' THEN 1 END) as current,
        COUNT(CASE WHEN status = 'upcoming' THEN 1 END) as upcoming,
        COUNT(CASE WHEN status = 'past' THEN 1 END) as past
      FROM exhibitions
    `);

    console.log('üåç SAYU Ï†ÑÏãú Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï†ÑÏ≤¥ ÌòÑÌô©');
    console.log('='.repeat(80));
    console.log(`\nüìä Ï†ÑÏ≤¥ ÌÜµÍ≥Ñ:`);
    console.log(`   Ï¥ù ÎØ∏Ïà†Í¥Ä/Í∞§Îü¨Î¶¨: ${overallStats.rows[0].total_venues}Í∞ú`);
    console.log(`   Ï¥ù Íµ≠Í∞Ä: ${overallStats.rows[0].total_countries}Í∞ú`);
    console.log(`   Ï¥ù Ï†ÑÏãú: ${overallStats.rows[0].total_exhibitions}Í∞ú`);
    console.log(`   - ÏßÑÌñâÏ§ë: ${overallStats.rows[0].current}Í∞ú`);
    console.log(`   - ÏòàÏ†ï: ${overallStats.rows[0].upcoming}Í∞ú`);
    console.log(`   - Ï¢ÖÎ£å: ${overallStats.rows[0].past}Í∞ú\n`);

    // 2. Íµ≠Í∞ÄÎ≥Ñ ÎØ∏Ïà†Í¥Ä Î™©Î°ù
    const venuesByCountry = await client.query(`
      SELECT 
        venue_country,
        venue_name,
        venue_city,
        COUNT(*) as exhibition_count
      FROM exhibitions
      GROUP BY venue_country, venue_name, venue_city
      ORDER BY venue_country, venue_name
    `);

    console.log('\nüèõÔ∏è Íµ≠Í∞ÄÎ≥Ñ ÎØ∏Ïà†Í¥Ä/Í∞§Îü¨Î¶¨ Î™©Î°ù');
    console.log('='.repeat(80));

    let currentCountry = '';
    let countryVenueCount = 0;
    let countryExhibitionCount = 0;
    const countryNames = {
      'KR': 'üá∞üá∑ ÌïúÍµ≠',
      'US': 'üá∫üá∏ ÎØ∏Íµ≠',
      'GB': 'üá¨üáß ÏòÅÍµ≠',
      'FR': 'üá´üá∑ ÌîÑÎûëÏä§',
      'DE': 'üá©üá™ ÎèÖÏùº',
      'IT': 'üáÆüáπ Ïù¥ÌÉàÎ¶¨ÏïÑ',
      'ES': 'üá™üá∏ Ïä§ÌéòÏù∏',
      'JP': 'üáØüáµ ÏùºÎ≥∏',
      'CN': 'üá®üá≥ Ï§ëÍµ≠',
      'HK': 'üá≠üá∞ ÌôçÏΩ©',
      'SG': 'üá∏üá¨ Ïã±Í∞ÄÌè¨Î•¥',
      'IN': 'üáÆüá≥ Ïù∏ÎèÑ',
      'TH': 'üáπüá≠ ÌÉúÍµ≠',
      'CA': 'üá®üá¶ Ï∫êÎÇòÎã§',
      'AU': 'üá¶üá∫ Ìò∏Ï£º',
      'NZ': 'üá≥üáø Îâ¥ÏßàÎûúÎìú',
      'BR': 'üáßüá∑ Î∏åÎùºÏßà',
      'AR': 'üá¶üá∑ ÏïÑÎ•¥Ìó®Ìã∞ÎÇò',
      'MX': 'üá≤üáΩ Î©ïÏãúÏΩî',
      'NL': 'üá≥üá± ÎÑ§ÎçúÎûÄÎìú',
      'RU': 'üá∑üá∫ Îü¨ÏãúÏïÑ',
      'AE': 'üá¶üá™ UAE',
      'EG': 'üá™üá¨ Ïù¥ÏßëÌä∏',
      'ZA': 'üáøüá¶ ÎÇ®ÏïÑÌîÑÎ¶¨Ïπ¥',
      'AT': 'üá¶üáπ Ïò§Ïä§Ìä∏Î¶¨ÏïÑ'
    };

    venuesByCountry.rows.forEach(venue => {
      if (venue.venue_country !== currentCountry) {
        if (currentCountry !== '') {
          console.log(`   ‚îî‚îÄ ÏÜåÍ≥Ñ: ${countryVenueCount}Í∞ú Í∏∞Í¥Ä, ${countryExhibitionCount}Í∞ú Ï†ÑÏãú\n`);
        }
        currentCountry = venue.venue_country;
        countryVenueCount = 0;
        countryExhibitionCount = 0;
        console.log(`\n${countryNames[venue.venue_country] || venue.venue_country}`);
      }
      console.log(`   ‚Ä¢ ${venue.venue_name} (${venue.venue_city}) - ${venue.exhibition_count}Í∞ú Ï†ÑÏãú`);
      countryVenueCount++;
      countryExhibitionCount += parseInt(venue.exhibition_count);
    });
    if (currentCountry !== '') {
      console.log(`   ‚îî‚îÄ ÏÜåÍ≥Ñ: ${countryVenueCount}Í∞ú Í∏∞Í¥Ä, ${countryExhibitionCount}Í∞ú Ï†ÑÏãú`);
    }

    // 3. ÌòÑÏû¨ ÏßÑÌñâÏ§ëÏù∏ Ï†ÑÏãú Î™©Î°ù
    const currentExhibitions = await client.query(`
      SELECT 
        title_en,
        title_local,
        venue_name,
        venue_city,
        venue_country,
        start_date,
        end_date,
        description
      FROM exhibitions
      WHERE status = 'current'
      ORDER BY venue_country, start_date DESC
    `);

    console.log('\n\nüé® ÌòÑÏû¨ ÏßÑÌñâÏ§ëÏù∏ Ï†ÑÏãú Î™©Î°ù');
    console.log('='.repeat(80));

    currentCountry = '';
    currentExhibitions.rows.forEach((exhibition, index) => {
      if (exhibition.venue_country !== currentCountry) {
        currentCountry = exhibition.venue_country;
        console.log(`\n${countryNames[exhibition.venue_country] || exhibition.venue_country}`);
        console.log('-'.repeat(40));
      }

      console.log(`\n${index + 1}. ${exhibition.title_en}`);
      if (exhibition.title_local && exhibition.title_local !== exhibition.title_en) {
        console.log(`   (${exhibition.title_local})`);
      }
      console.log(`   üìç ${exhibition.venue_name}, ${exhibition.venue_city}`);
      console.log(`   üìÖ ${new Date(exhibition.start_date).toLocaleDateString('ko-KR')} ~ ${new Date(exhibition.end_date).toLocaleDateString('ko-KR')}`);
      if (exhibition.description) {
        console.log(`   üìù ${exhibition.description.substring(0, 100)}...`);
      }
    });

    // 4. ÏòàÏ†ïÎêú Ï†ÑÏãú Î™©Î°ù (2025ÎÖÑ)
    const upcomingExhibitions = await client.query(`
      SELECT 
        title_en,
        title_local,
        venue_name,
        venue_city,
        venue_country,
        start_date,
        end_date,
        description
      FROM exhibitions
      WHERE status = 'upcoming'
      ORDER BY start_date, venue_country
      LIMIT 20
    `);

    console.log('\n\nüîÆ ÏòàÏ†ïÎêú Ï†ÑÏãú Î™©Î°ù (ÏÉÅÏúÑ 20Í∞ú)');
    console.log('='.repeat(80));

    upcomingExhibitions.rows.forEach((exhibition, index) => {
      console.log(`\n${index + 1}. ${exhibition.title_en}`);
      if (exhibition.title_local && exhibition.title_local !== exhibition.title_en) {
        console.log(`   (${exhibition.title_local})`);
      }
      console.log(`   üìç ${exhibition.venue_name}, ${exhibition.venue_city}, ${countryNames[exhibition.venue_country] || exhibition.venue_country}`);
      console.log(`   üìÖ ${new Date(exhibition.start_date).toLocaleDateString('ko-KR')} ~ ${new Date(exhibition.end_date).toLocaleDateString('ko-KR')}`);
    });

    // 5. ÏÜåÏä§Î≥Ñ ÌÜµÍ≥Ñ
    const sourceStats = await client.query(`
      SELECT 
        source,
        COUNT(*) as count
      FROM exhibitions
      GROUP BY source
      ORDER BY count DESC
    `);

    console.log('\n\nüì° Îç∞Ïù¥ÌÑ∞ ÏÜåÏä§Î≥Ñ ÌÜµÍ≥Ñ');
    console.log('='.repeat(80));
    sourceStats.rows.forEach(source => {
      console.log(`   ${source.source}: ${source.count}Í∞ú`);
    });

    // 6. Ï£ºÏöî ÎèÑÏãúÎ≥Ñ Ï†ÑÏãú Ïàò
    const cityStats = await client.query(`
      SELECT 
        venue_city,
        venue_country,
        COUNT(DISTINCT venue_name) as venue_count,
        COUNT(*) as exhibition_count
      FROM exhibitions
      GROUP BY venue_city, venue_country
      HAVING COUNT(*) >= 3
      ORDER BY exhibition_count DESC
      LIMIT 15
    `);

    console.log('\n\nüèôÔ∏è Ï£ºÏöî ÎèÑÏãúÎ≥Ñ Ï†ÑÏãú ÌòÑÌô© (Ï†ÑÏãú 3Í∞ú Ïù¥ÏÉÅ)');
    console.log('='.repeat(80));
    cityStats.rows.forEach((city, index) => {
      console.log(`${index + 1}. ${city.venue_city}, ${countryNames[city.venue_country] || city.venue_country}`);
      console.log(`   - ${city.venue_count}Í∞ú Í∏∞Í¥Ä, ${city.exhibition_count}Í∞ú Ï†ÑÏãú`);
    });

  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    client.release();
    await pool.end();
  }
}

if (require.main === module) {
  showAllMuseumsAndExhibitions();
}
