// Diversified Classifier - Îçî Îã§ÏñëÌïú APT Î∂ÑÌè¨Î•º ÏúÑÌïú Î∂ÑÎ•òÍ∏∞

const { GoogleGenerativeAI } = require('@google/generative-ai');

class DiversifiedClassifier {
  constructor() {
    this.gemini = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
    this.model = this.gemini.getGenerativeModel({ model: 'gemini-1.5-flash' });

    // APT Î∂ÑÌè¨ Ï∂îÏ†Å
    this.distributionTracker = {
      SRMC: 0,
      SREC: 0,
      SREF: 0,
      SAEF: 0,
      SAEC: 0,
      SAMF: 0,
      SAMC: 0,
      SRMF: 0,
      LRMC: 0,
      LREC: 0,
      LREF: 0,
      LAEF: 0,
      LAEC: 0,
      LAMF: 0,
      LAMC: 0,
      LRMF: 0
    };
  }

  async classifyArtist(artistData) {
    console.log(`\nüé® Îã§ÏñëÏÑ± Î∂ÑÎ•ò: ${artistData.name}`);

    try {
      const actualArtistName = this.extractActualArtistName(artistData.name);
      const isAttribution = artistData.name !== actualArtistName;

      // ÏûëÍ∞Ä Ïú†ÌòïÍ≥º ÌäπÏÑ± ÌååÏïÖ
      const artistType = this.categorizeArtist(artistData);
      const hasRichData = this.hasRichData(artistData);

      console.log(`   üìã Ïú†Ìòï: ${artistType}, Îç∞Ïù¥ÌÑ∞ ÌíàÏßà: ${hasRichData ? 'ÌíçÎ∂Ä' : 'Î∂ÄÏ°±'}`);

      if (hasRichData) {
        // Îç∞Ïù¥ÌÑ∞Í∞Ä ÌíçÎ∂ÄÌïú Í≤ΩÏö∞ Gemini Î∂ÑÏÑù
        const result = await this.analyzeWithDiversityPrompt(
          { ...artistData, actualName: actualArtistName, isAttribution, artistType }
        );

        if (result && result.aptType) {
          // SRMC ÏñµÏ†ú
          if (result.aptType === 'SRMC' && this.getSRMCRatio() > 0.15) {
            return this.adjustAwayFromSRMC(result, artistData, artistType);
          }
          return this.formatResult(result, artistData);
        }
      }

      // Îç∞Ïù¥ÌÑ∞Í∞Ä Î∂ÄÏ°±Ìïú Í≤ΩÏö∞ Îã§ÏñëÌïú Ìè¥Î∞±
      return this.diverseFallback(artistData, artistType);

    } catch (error) {
      console.error(`   ‚ùå Ïò§Î•ò: ${error.message}`);
      throw error;
    }
  }

  hasRichData(artistData) {
    return (artistData.bio && artistData.bio.length > 200) ||
           (artistData.nationality && artistData.era && artistData.birth_year) ||
           (artistData.movement);
  }

  getSRMCRatio() {
    const total = Object.values(this.distributionTracker).reduce((a, b) => a + b, 0);
    return total > 0 ? this.distributionTracker.SRMC / total : 0;
  }

  categorizeArtist(artistData) {
    const name = artistData.name.toLowerCase();

    if (name.includes('greek') || name.includes('athens')) return 'ancient_greek';
    if (name.match(/attributed|after|follower|workshop/i)) return 'attribution';

    if (artistData.era) {
      const era = artistData.era.toLowerCase();
      if (era.includes('renaissance')) return 'renaissance';
      if (era.includes('baroque')) return 'baroque';
      if (era.includes('impressionis')) return 'impressionist';
      if (era.includes('romantic')) return 'romantic';
      if (era.includes('modern') || era.includes('contemporary')) return 'modern';
      if (era.includes('abstract')) return 'abstract';
    }

    if (artistData.birth_year) {
      if (artistData.birth_year < 1600) return 'old_master';
      if (artistData.birth_year < 1800) return 'classical';
      if (artistData.birth_year < 1900) return '19th_century';
      if (artistData.birth_year < 1950) return 'modern';
      return 'contemporary';
    }

    return 'unknown';
  }

  extractActualArtistName(fullName) {
    const attributions = [
      'Attributed to ', 'After ', 'Follower of ', 'Circle of ',
      'School of ', 'Workshop of ', 'Studio of ', 'Manner of ',
      'Style of ', 'Copy after ', 'Imitator of '
    ];

    let actualName = fullName;
    for (const attr of attributions) {
      if (actualName.startsWith(attr)) {
        actualName = actualName.substring(attr.length);
        break;
      }
    }

    return actualName.trim();
  }

  async analyzeWithDiversityPrompt(artistData) {
    try {
      const currentDistribution = this.getDistributionString();

      const prompt = `ÏûëÍ∞ÄÎ•º 16Í∞ÄÏßÄ APT Ï§ë ÌïòÎÇòÎ°ú Î∂ÑÎ•òÌï¥Ï£ºÏÑ∏Ïöî.

ÏûëÍ∞Ä: ${artistData.actualName || artistData.name}
Ïú†Ìòï: ${artistData.artistType}
${artistData.isAttribution ? '‚ö†Ô∏è Í∑ÄÏÜç ÏûëÌíà' : ''}

Ï†ïÎ≥¥:
- Íµ≠Ï†Å: ${artistData.nationality || 'Î∂àÎ™Ö'}
- ÏãúÎåÄ: ${artistData.era || 'Î∂àÎ™Ö'}
- ÏÉùÎ™∞: ${artistData.birth_year || '?'} - ${artistData.death_year || '?'}
${artistData.bio ? `- Ï†ÑÍ∏∞: ${artistData.bio.substring(0, 800)}` : ''}

ÌòÑÏû¨ APT Î∂ÑÌè¨:
${currentDistribution}

‚ö†Ô∏è Ï§ëÏöî ÏßÄÏπ®:
1. SRMCÎäî Ïù¥ÎØ∏ Í≥ºÎèÑÌïòÍ≤å ÎßéÏúºÎØÄÎ°ú Ï†ïÎßê Î™ÖÌôïÌïú Í∑ºÍ±∞Í∞Ä ÏûàÏùÑ ÎïåÎßå ÏÇ¨Ïö©
2. Îã§Ïùå Ïú†ÌòïÎì§ÏùÑ Ï†ÅÍ∑π Í≥†Î†§Ìï¥Ï£ºÏÑ∏Ïöî:
   - LAEF (Î™ΩÌôòÏ†Å Î∞©ÎûëÏûê): ÎèÖÏ∞ΩÏ†Å, Ïã§ÌóòÏ†Å, ÎÇ¥Î©¥ ÌÉêÍµ¨
   - LREF (Í≥†ÎèÖÌïú Í¥ÄÏ∞∞Ïûê): Ï°∞Ïö©Ìïú Í¥ÄÏ∞∞Ïûê, ÏÑ∏Î∞ÄÌïú Î¨òÏÇ¨
   - SAEF (Í∞êÏÑ± ÎÇòÎàîÏù¥): Í∞êÏ†ï ÌëúÌòÑ, Í≥µÍ∞êÎåÄ ÌòïÏÑ±
   - LREC (ÏÑ¨ÏÑ∏Ìïú Í∞êÏ†ïÍ∞Ä): ÎØ∏Î¨òÌïú Í∞êÏ†ï, ÎÇ¥ÏÑ±Ï†Å
   - LAMF (ÏßÅÍ¥ÄÏ†Å ÌÉêÍµ¨Ïûê): Ï≤†ÌïôÏ†Å, Í∞úÎÖêÏ†Å
   - SREC (Îî∞ÎúªÌïú ÏïàÎÇ¥Ïûê): ÏπúÍ∑ºÌï®, ÎåÄÏ§ëÏÑ±

3. Í∑πÎã®Ï†Å Ï†êÏàòÎ•º ÎëêÎ†§ÏõåÌïòÏßÄ ÎßàÏÑ∏Ïöî:
   - Ï∂îÏÉÅÏ†Å ÏûëÍ∞ÄÎäî A/R: -70~-90
   - Í∞êÏ†ïÏ†Å ÏûëÍ∞ÄÎäî E/M: -60~-80
   - Ïã§ÌóòÏ†Å ÏûëÍ∞ÄÎäî F/C: -70~-90
   - ÏùÄÎëîÌòï ÏûëÍ∞ÄÎäî L/S: -60~-80

ÌèâÍ∞Ä Í∏∞Ï§Ä:
- L/SÏ∂ï: ÌòºÏûê(-100) vs Ìï®Íªò(+100)
- A/RÏ∂ï: Ï∂îÏÉÅ(-100) vs Íµ¨ÏÉÅ(+100)
- E/MÏ∂ï: Í∞êÏ†ï(-100) vs ÏùòÎØ∏(+100)
- F/CÏ∂ï: ÏûêÏú†(-100) vs Ï≤¥Í≥Ñ(+100)

ÏùëÎãµ ÌòïÏãù:
L/S: [Ï†êÏàò] (Í∑ºÍ±∞)
A/R: [Ï†êÏàò] (Í∑ºÍ±∞)
E/M: [Ï†êÏàò] (Í∑ºÍ±∞)
F/C: [Ï†êÏàò] (Í∑ºÍ±∞)
APT: [4Í∏ÄÏûê]
Î∂ÑÎ•ò Í∑ºÍ±∞: [Ï¢ÖÌï© ÏÑ§Î™Ö]`;

      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();

      console.log(`   Gemini ÏùëÎãµ: ${text.substring(0, 150)}...`);

      return this.parseResponse(text);

    } catch (error) {
      console.error('   ‚ö†Ô∏è Gemini Ïò§Î•ò:', error.message);
      return null;
    }
  }

  getDistributionString() {
    const total = Object.values(this.distributionTracker).reduce((a, b) => a + b, 0);
    if (total === 0) return 'ÏïÑÏßÅ Î∂ÑÎ•òÎêú ÏûëÍ∞Ä ÏóÜÏùå';

    return Object.entries(this.distributionTracker)
      .filter(([_, count]) => count > 0)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5)
      .map(([type, count]) => `${type}: ${Math.round(count * 100 / total)}%`)
      .join(', ');
  }

  parseResponse(text) {
    try {
      const result = {
        axisScores: { L_S: 0, A_R: 0, E_M: 0, F_C: 0 },
        aptType: null,
        reasoning: ''
      };

      // Ï∂ï Ï†êÏàò Ï∂îÏ∂ú
      const patterns = {
        L_S: /L\/S:\s*([+-]?\d+)/i,
        A_R: /A\/R:\s*([+-]?\d+)/i,
        E_M: /E\/M:\s*([+-]?\d+)/i,
        F_C: /F\/C:\s*([+-]?\d+)/i
      };

      for (const [axis, pattern] of Object.entries(patterns)) {
        const match = text.match(pattern);
        if (match) {
          result.axisScores[axis] = parseInt(match[1]);
        }
      }

      // APT Ï∂îÏ∂ú
      const aptMatch = text.match(/APT:\s*([LS][AR][EM][FC])/i);
      if (aptMatch) {
        result.aptType = aptMatch[1].toUpperCase();
      } else {
        result.aptType = this.calculateAPT(result.axisScores);
      }

      // Î∂ÑÎ•ò Í∑ºÍ±∞
      const reasonMatch = text.match(/Î∂ÑÎ•ò Í∑ºÍ±∞:\s*(.+?)$/ims);
      if (reasonMatch) {
        result.reasoning = reasonMatch[1].trim();
      }

      return result;

    } catch (error) {
      console.error('ÌååÏã± Ïò§Î•ò:', error);
      return null;
    }
  }

  calculateAPT(scores) {
    return (scores.L_S < 0 ? 'L' : 'S') +
           (scores.A_R < 0 ? 'A' : 'R') +
           (scores.E_M < 0 ? 'E' : 'M') +
           (scores.F_C < 0 ? 'F' : 'C');
  }

  adjustAwayFromSRMC(result, artistData, artistType) {
    console.log('   üîÑ SRMC Í≥ºÎã§Î°ú Ï°∞Ï†ï Ï§ë...');

    // Ïú†ÌòïÎ≥ÑÎ°ú Í∞ÄÏû• Ï†ÅÌï©Ìïú Ï∂ï Ï°∞Ï†ï
    const adjustments = {
      'impressionist': { L_S: -40, E_M: -60 }, // LAEFÎ°ú
      'modern': { A_R: -50, F_C: -40 }, // LAEF/LAMFÎ°ú
      'baroque': { E_M: -50, L_S: 30 }, // SRECÎ°ú
      'romantic': { L_S: -30, E_M: -70 }, // LREFÎ°ú
      'abstract': { A_R: -80, F_C: -60 }, // LAEFÎ°ú
      'attribution': { L_S: 40, E_M: -30 } // SRECÎ°ú
    };

    const adj = adjustments[artistType] || { L_S: -20, A_R: -30 };

    Object.entries(adj).forEach(([axis, change]) => {
      result.axisScores[axis] += change;
    });

    result.aptType = this.calculateAPT(result.axisScores);
    result.analysis = {
      ...result.analysis,
      adjusted: true,
      originalType: 'SRMC'
    };

    return this.formatResult(result, artistData);
  }

  diverseFallback(artistData, artistType) {
    // Ïú†ÌòïÎ≥Ñ Îã§ÏñëÌïú Í∏∞Î≥∏Í∞í
    const typeDefaults = {
      'ancient_greek': { apt: 'SREC', scores: { L_S: 40, A_R: 80, E_M: -30, F_C: 50 } },
      'renaissance': { apt: 'LRMC', scores: { L_S: -10, A_R: 85, E_M: 40, F_C: 70 } },
      'baroque': { apt: 'SREC', scores: { L_S: 50, A_R: 90, E_M: -60, F_C: 40 } },
      'impressionist': { apt: 'LAEF', scores: { L_S: -40, A_R: -10, E_M: -70, F_C: -50 } },
      'romantic': { apt: 'LREF', scores: { L_S: -30, A_R: 60, E_M: -80, F_C: -20 } },
      'modern': { apt: 'LAMF', scores: { L_S: -50, A_R: -60, E_M: -20, F_C: -70 } },
      'contemporary': { apt: 'LAEC', scores: { L_S: -20, A_R: -40, E_M: -50, F_C: 30 } },
      'abstract': { apt: 'LAEF', scores: { L_S: -60, A_R: -90, E_M: -60, F_C: -80 } },
      'attribution': { apt: 'SREC', scores: { L_S: 60, A_R: 70, E_M: -40, F_C: 30 } },
      '19th_century': { apt: 'LREC', scores: { L_S: -10, A_R: 70, E_M: -40, F_C: 40 } },
      'classical': { apt: 'SRMF', scores: { L_S: 30, A_R: 90, E_M: 60, F_C: -10 } },
      'old_master': { apt: 'LRMC', scores: { L_S: -20, A_R: 95, E_M: 50, F_C: 80 } }
    };

    // Î∂ÑÌè¨Í∞Ä Ï†ÅÏùÄ APTÎ•º Ïö∞ÏÑ† ÏÑ†ÌÉù
    const leastUsed = this.getLeastUsedAPT();
    const defaults = typeDefaults[artistType] ||
                    { apt: leastUsed, scores: this.getScoresForAPT(leastUsed) };

    // Î∂ÑÌè¨ Ï∂îÏ†Å
    this.distributionTracker[defaults.apt]++;

    return {
      aptType: defaults.apt,
      axisScores: defaults.scores,
      confidence: 40,
      analysis: {
        strategy: 'diverse_fallback',
        actualArtistName: this.extractActualArtistName(artistData.name),
        reasoning: `${artistType} Ïú†ÌòïÏùò ÌäπÏÑ±Í≥º APT Î∂ÑÌè¨ Í∑†ÌòïÏùÑ Í≥†Î†§Ìïú Ï∂îÎ°†`
      }
    };
  }

  getLeastUsedAPT() {
    const sorted = Object.entries(this.distributionTracker)
      .sort(([,a], [,b]) => a - b);
    return sorted[0][0];
  }

  getScoresForAPT(apt) {
    // APTÏóêÏÑú Ïó≠ÏÇ∞Ìïú Ï†êÏàò
    const scoreMap = {
      'L': -40, 'S': 40,
      'A': -50, 'R': 50,
      'E': -60, 'M': 60,
      'F': -70, 'C': 70
    };

    return {
      L_S: scoreMap[apt[0]],
      A_R: scoreMap[apt[1]],
      E_M: scoreMap[apt[2]],
      F_C: scoreMap[apt[3]]
    };
  }

  formatResult(geminiResult, artistData) {
    const confidence = this.calculateConfidence(geminiResult, artistData);

    // Î∂ÑÌè¨ Ï∂îÏ†Å
    this.distributionTracker[geminiResult.aptType]++;

    return {
      aptType: geminiResult.aptType,
      axisScores: geminiResult.axisScores,
      confidence,
      analysis: {
        strategy: 'diversified_v1',
        actualArtistName: this.extractActualArtistName(artistData.name),
        reasoning: geminiResult.reasoning,
        adjusted: geminiResult.analysis?.adjusted || false
      }
    };
  }

  calculateConfidence(result, artistData) {
    let confidence = 50;

    if (artistData.bio && artistData.bio.length > 500) confidence += 20;
    else if (artistData.bio && artistData.bio.length > 100) confidence += 10;

    if (artistData.nationality) confidence += 5;
    if (artistData.era) confidence += 5;
    if (artistData.birth_year) confidence += 5;

    if (result.reasoning && result.reasoning.length > 100) confidence += 10;

    // Ï°∞Ï†ïÎêú Í≤ΩÏö∞ Ïã†Î¢∞ÎèÑ Í∞êÏÜå
    if (result.analysis?.adjusted) confidence -= 10;

    return Math.min(85, Math.max(30, confidence));
  }
}

module.exports = DiversifiedClassifier;
