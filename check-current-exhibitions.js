const { createClient } = require('@supabase/supabase-js');
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, 'backend/.env') });

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
);

async function checkCurrentExhibitions() {
  console.log('üîç ÌòÑÏû¨ ÏßÑÌñâ Ï§ëÏù∏ Ï†ÑÏãú Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏\n');
  console.log('Ïò§Îäò ÎÇ†Ïßú:', new Date().toISOString().split('T')[0]);
  console.log('=' .repeat(60));
  
  try {
    const today = new Date().toISOString().split('T')[0];
    
    // ÌòÑÏû¨ ÏßÑÌñâ Ï§ëÏù∏ Ï†ÑÏãú Í∞ÄÏ†∏Ïò§Í∏∞ (ÏãúÏûëÏùºÏù¥ Í≥ºÍ±∞Ïù¥Í≥† Ï¢ÖÎ£åÏùºÏù¥ ÎØ∏ÎûòÏù∏ Í≤É)
    const { data: exhibitions, error } = await supabase
      .from('exhibitions')
      .select('id, title_local, venue_name, start_date, end_date, admission_fee, tags')
      .lte('start_date', today)  // ÏãúÏûëÏùºÏù¥ Ïò§Îäò Ïù¥Ï†Ñ (Ïù¥ÎØ∏ ÏãúÏûëÌï®)
      .gte('end_date', today)    // Ï¢ÖÎ£åÏùºÏù¥ Ïò§Îäò Ïù¥ÌõÑ (ÏïÑÏßÅ Ïïà ÎÅùÎÇ®)
      .order('start_date', { ascending: false })
      .limit(50);
    
    if (error) {
      console.error('‚ùå ÏóêÎü¨:', error);
      return;
    }
    
    console.log(`\n‚úÖ ÌòÑÏû¨ ÏßÑÌñâ Ï§ëÏù∏ Ï†ÑÏãú: ${exhibitions?.length || 0}Í∞ú\n`);
    
    if (exhibitions && exhibitions.length > 0) {
      exhibitions.forEach((ex, idx) => {
        console.log(`${idx + 1}. ${ex.title_local || 'Ï†úÎ™© ÏóÜÏùå'}`);
        console.log(`   Ïû•ÏÜå: ${ex.venue_name || 'Ïû•ÏÜå ÎØ∏Ï†ï'}`);
        console.log(`   Í∏∞Í∞Ñ: ${ex.start_date} ~ ${ex.end_date}`);
        console.log(`   Í∞ÄÍ≤©: ${ex.admission_fee || 'Ï†ïÎ≥¥ ÏóÜÏùå'}`);
        if (ex.tags) {
          console.log(`   ÌÉúÍ∑∏: ${ex.tags}`);
        }
        console.log('');
      });
      
      // Ïû•ÏÜåÎ≥Ñ ÌÜµÍ≥Ñ
      console.log('\nüìç Ïû•ÏÜåÎ≥Ñ Ï†ÑÏãú Ïàò:');
      const venueCount = {};
      exhibitions.forEach(ex => {
        const venue = ex.venue_name || 'Ïû•ÏÜå ÎØ∏Ï†ï';
        venueCount[venue] = (venueCount[venue] || 0) + 1;
      });
      
      Object.entries(venueCount)
        .sort((a, b) => b[1] - a[1])
        .forEach(([venue, count]) => {
          console.log(`   ${venue}: ${count}Í∞ú`);
        });
        
    } else {
      console.log('ÌòÑÏû¨ ÏßÑÌñâ Ï§ëÏù∏ Ï†ÑÏãúÍ∞Ä ÏóÜÏäµÎãàÎã§.');
      
      // ÎåÄÏã† Î™®Îì† Ï†ÑÏãú ÌôïÏù∏
      console.log('\nüìÖ Î™®Îì† Ï†ÑÏãú Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏:');
      const { data: allExhibitions, error: allError } = await supabase
        .from('exhibitions')
        .select('title_local, start_date, end_date, venue_name')
        .order('start_date', { ascending: false })
        .limit(20);
        
      if (allExhibitions && allExhibitions.length > 0) {
        console.log(`\nÏµúÍ∑º Îì±Î°ùÎêú Ï†ÑÏãú ${allExhibitions.length}Í∞ú:`);
        allExhibitions.forEach((ex, idx) => {
          console.log(`${idx + 1}. ${ex.title_local} (${ex.start_date} ~ ${ex.end_date}) @ ${ex.venue_name}`);
        });
      }
    }
    
  } catch (error) {
    console.error('‚ùå Ïã§Ìñâ Ï§ë Ïò§Î•ò:', error);
  }
}

checkCurrentExhibitions();