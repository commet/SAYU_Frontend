const { createClient } = require('@supabase/supabase-js');
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, 'backend/.env') });

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
);

async function checkImportantExhibitions() {
  console.log('üîç Ï§ëÏöî Ï†ÑÏãú ÌôïÏù∏ (Ïù¥Î∂à, ÍπÄÏ∞ΩÏó¥, Ïò§ÎûëÏ£ºÎ¶¨)\n');
  console.log('=' .repeat(60));
  
  try {
    // ÌÇ§ÏõåÎìúÎ°ú Í≤ÄÏÉâ
    const keywords = [
      'Ïù¥Î∂à', 'Lee Bul', 
      'ÍπÄÏ∞ΩÏó¥', 'Kim Tschang', 'Kim Chang',
      'Ïò§ÎûëÏ£ºÎ¶¨', 'Orangerie', 
      'ÏÑ∏Ïûî', 'Cezanne', 
      'Î•¥ÎàÑÏïÑÎ•¥', 'Renoir'
    ];
    
    for (const keyword of keywords) {
      console.log(`\nüìå "${keyword}" Í≤ÄÏÉâ Í≤∞Í≥º:`);
      
      const { data: exhibitions, error } = await supabase
        .from('exhibitions')
        .select('id, title_local, venue_name, start_date, end_date, admission_fee, artists')
        .or(`title_local.ilike.%${keyword}%,title_en.ilike.%${keyword}%,description.ilike.%${keyword}%,artists.cs.["${keyword}"]`)
        .order('start_date', { ascending: false })
        .limit(5);
      
      if (error) {
        console.error('  ‚ùå ÏóêÎü¨:', error.message);
        continue;
      }
      
      if (exhibitions && exhibitions.length > 0) {
        exhibitions.forEach(ex => {
          console.log(`  - ${ex.title_local}`);
          console.log(`    Ïû•ÏÜå: ${ex.venue_name}`);
          console.log(`    Í∏∞Í∞Ñ: ${ex.start_date} ~ ${ex.end_date}`);
        });
      } else {
        console.log('  Í≤∞Í≥º ÏóÜÏùå');
      }
    }
    
    // ÌäπÏ†ï ÎØ∏Ïà†Í¥Ä Ï†ÑÏãú ÌôïÏù∏
    console.log('\n\nüìç Ï£ºÏöî ÎØ∏Ïà†Í¥Ä 2025ÎÖÑ ÌïòÎ∞òÍ∏∞ Ï†ÑÏãú:');
    const venues = ['Î¶¨ÏõÄ', 'Íµ≠Î¶ΩÌòÑÎåÄÎØ∏Ïà†Í¥Ä', 'ÏòàÏà†ÏùòÏ†ÑÎãπ', 'ÌïúÍ∞ÄÎûå'];
    
    for (const venue of venues) {
      console.log(`\n[${venue}]`);
      
      const { data: exhibitions, error } = await supabase
        .from('exhibitions')
        .select('title_local, start_date, end_date')
        .ilike('venue_name', `%${venue}%`)
        .gte('start_date', '2025-08-01')
        .lte('start_date', '2026-01-31')
        .order('start_date', { ascending: true })
        .limit(10);
      
      if (exhibitions && exhibitions.length > 0) {
        exhibitions.forEach(ex => {
          console.log(`  - ${ex.title_local} (${ex.start_date} ~ ${ex.end_date})`);
        });
      }
    }
    
  } catch (error) {
    console.error('‚ùå Ïã§Ìñâ Ï§ë Ïò§Î•ò:', error);
  }
}

checkImportantExhibitions();