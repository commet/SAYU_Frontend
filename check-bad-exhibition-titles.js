const { createClient } = require('@supabase/supabase-js');
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, 'backend/.env') });

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
);

async function checkBadExhibitionTitles() {
  console.log('üîç ÏûòÎ™ªÎêú Ï†ÑÏãú Ï†úÎ™© Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏\n');
  console.log('=' .repeat(60));
  
  try {
    // Î¨∏Ï†úÍ∞Ä ÏûàÎäî Ï†úÎ™©Îì§ ÌôïÏù∏
    const { data: exhibitions, error } = await supabase
      .from('exhibitions')
      .select('id, title_local, venue_name, description, source')
      .or('title_local.like.%Í∏∞ÏõêÏ†Ñ%,title_local.like.%ÏÑ†Ï†ïÌï¥Ïïº%,title_local.like.%Ïó¨ ÎÖÑ%,title_local.like.%ÏûëÌíà%Ï†ê%')
      .limit(20);
    
    if (error) {
      console.error('‚ùå ÏóêÎü¨:', error);
      return;
    }
    
    console.log(`\nüö® Î¨∏Ï†úÍ∞Ä ÏûàÎäî Ï†úÎ™©Îì§ (${exhibitions?.length || 0}Í∞ú):\n`);
    
    exhibitions?.forEach((ex, idx) => {
      console.log(`${idx + 1}. [${ex.source}] ${ex.venue_name}`);
      console.log(`   Ï†úÎ™©: "${ex.title_local}"`);
      if (ex.description) {
        console.log(`   ÏÑ§Î™Ö ÏãúÏûë: "${ex.description.substring(0, 100)}..."`);
      }
      console.log('');
    });
    
    // ÏÑúÏö∏ Ï£ºÏöî ÎØ∏Ïà†Í¥Ä Ï†ÑÏãú Ï§ë Ï†úÎ™©Ïù¥ ÎÑàÎ¨¥ Í∏¥ Í≤ÉÎì§
    console.log('\nüìè Ï†úÎ™©Ïù¥ ÎÑàÎ¨¥ Í∏¥ Ï†ÑÏãúÎì§:');
    const { data: longTitles } = await supabase
      .from('exhibitions')
      .select('title_local, venue_name')
      .eq('venue_city', 'ÏÑúÏö∏')
      .gte('end_date', new Date().toISOString().split('T')[0])
      .order('title_local', { ascending: false })
      .limit(10);
    
    longTitles?.forEach(ex => {
      if (ex.title_local && ex.title_local.length > 50) {
        console.log(`- [${ex.title_local.length}Ïûê] ${ex.venue_name}: "${ex.title_local.substring(0, 50)}..."`);
      }
    });
    
    // Ï†úÎ™©Ïóê ÎßàÏπ®ÌëúÎÇò Ï§ÑÏûÑÌëúÍ∞Ä ÏûàÎäî Í≤ΩÏö∞
    console.log('\n‚ö†Ô∏è Ï†úÎ™©Ïóê ÎßàÏπ®Ìëú/Ï§ÑÏûÑÌëúÍ∞Ä ÏûàÎäî Ï†ÑÏãú:');
    const { data: punctuationTitles } = await supabase
      .from('exhibitions')
      .select('title_local, venue_name')
      .or('title_local.like.%...%,title_local.like.%.%')
      .limit(10);
    
    punctuationTitles?.forEach(ex => {
      console.log(`- ${ex.venue_name}: "${ex.title_local}"`);
    });
    
    // Ï†ïÏÉÅÏ†ÅÏù∏ Ï†ÑÏãú Ï†úÎ™© ÏòàÏãú
    console.log('\n‚úÖ Ï†ïÏÉÅÏ†ÅÏù∏ Ï†ÑÏãú Ï†úÎ™© ÏòàÏãú:');
    const { data: goodTitles } = await supabase
      .from('exhibitions')
      .select('title_local, venue_name')
      .in('venue_name', ['Î¶¨ÏõÄÎØ∏Ïà†Í¥Ä', 'Íµ≠Î¶ΩÌòÑÎåÄÎØ∏Ïà†Í¥Ä ÏÑúÏö∏', 'ÏïÑÎ™®Î†àÌçºÏãúÌîΩÎØ∏Ïà†Í¥Ä'])
      .gte('start_date', '2025-08-01')
      .limit(10);
    
    goodTitles?.forEach(ex => {
      console.log(`- ${ex.venue_name}: "${ex.title_local}"`);
    });
    
  } catch (error) {
    console.error('‚ùå Ïã§Ìñâ Ï§ë Ïò§Î•ò:', error);
  }
}

checkBadExhibitionTitles();