const { createClient } = require('@supabase/supabase-js');
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, 'backend/.env') });

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
);

async function checkBadTitlesInMajorVenues() {
  console.log('üö® Ï£ºÏöî Í∏∞Í¥ÄÏùò ÏûòÎ™ªÎêú Ï†ÑÏãú Ï†úÎ™© ÌôïÏù∏\n');
  console.log('=' .repeat(80));
  
  try {
    // Ï£ºÏöî Í∏∞Í¥Ä Î¶¨Ïä§Ìä∏
    const majorVenues = [
      'ÏÑúÏö∏ÏãúÎ¶ΩÎØ∏Ïà†Í¥Ä',
      'ÏÑúÏö∏ÏãúÎ¶Ω Î∂ÅÏÑúÏö∏ÎØ∏Ïà†Í¥Ä',
      'ÏÑúÏö∏ÏãúÎ¶Ω ÎÇ®ÏÑúÏö∏ÎØ∏Ïà†Í¥Ä',
      'ÏÑúÏö∏ÏãúÎ¶Ω ÎØ∏Ïà†ÏïÑÏπ¥Ïù¥Î∏å',
      'Íµ≠Î¶ΩÌòÑÎåÄÎØ∏Ïà†Í¥Ä ÏÑúÏö∏',
      'Íµ≠Î¶ΩÌòÑÎåÄÎØ∏Ïà†Í¥Ä ÎçïÏàòÍ∂Å',
      'Íµ≠Î¶ΩÌòÑÎåÄÎØ∏Ïà†Í¥Ä Í≥ºÏ≤ú',
      'Íµ≠Î¶ΩÌòÑÎåÄÎØ∏Ïà†Í¥Ä Ï≤≠Ï£º',
      'Î¶¨ÏõÄÎØ∏Ïà†Í¥Ä',
      'DDP ÎèôÎåÄÎ¨∏ÎîîÏûêÏù∏ÌîåÎùºÏûê',
      'ÏÑúÏö∏Í≥µÏòàÎ∞ïÎ¨ºÍ¥Ä',
      'ÏÑúÏö∏ÏÑúÏòàÎ∞ïÎ¨ºÍ¥Ä',
      'ÏòàÏà†ÏùòÏ†ÑÎãπ',
      'ÌïúÍ∞ÄÎûåÎØ∏Ïà†Í¥Ä',
      'ÌïúÍ∞ÄÎûåÎîîÏûêÏù∏ÎØ∏Ïà†Í¥Ä',
      'ÏïÑÎ™®Î†àÌçºÏãúÌîΩÎØ∏Ïà†Í¥Ä',
      'ÏïÑÎ•¥ÏΩîÎØ∏Ïà†Í¥Ä',
      'Íµ≠Î¶ΩÏ§ëÏïôÎ∞ïÎ¨ºÍ¥Ä',
      'ÎåÄÎ¶ºÎØ∏Ïà†Í¥Ä',
      'ÏÇºÏÑ±ÎØ∏Ïà†Í¥Ä',
      'Ìò∏ÏïîÎØ∏Ïà†Í¥Ä'
    ];
    
    const problemTitles = [];
    
    for (const venue of majorVenues) {
      const { data: exhibitions } = await supabase
        .from('exhibitions')
        .select('id, title_local, venue_name, start_date, end_date, description')
        .eq('venue_name', venue)
        .gte('end_date', '2025-01-01')  // 2025ÎÖÑ Ïù¥ÌõÑ Ï†ÑÏãúÎßå
        .order('start_date', { ascending: false });
      
      if (exhibitions && exhibitions.length > 0) {
        for (const ex of exhibitions) {
          const title = ex.title_local || '';
          
          // Î¨∏Ï†úÍ∞Ä ÏûàÎäî Ï†úÎ™© Ìå®ÌÑ¥ Ï≤¥ÌÅ¨
          const isBadTitle = 
            title.length > 70 ||  // ÎÑàÎ¨¥ Í∏¥ Ï†úÎ™©
            title.includes('...') ||  // ÏûòÎ¶∞ Ï†úÎ™©
            title.match(/^\d+ÎÖÑ/) ||  // ÎÖÑÎèÑÎ°ú ÏãúÏûë
            title.match(/Í∏∞ÏõêÏ†Ñ|Ïó¨ ÎÖÑ|ÏûëÌíà.*Ï†ê/) ||  // ÏÑ§Î™ÖÎ¨∏ Í∞ôÏùÄ Ï†úÎ™©
            title.includes('Îäî') ||  // Î¨∏Ïû• ÌòïÌÉú
            title.includes('ÌïòÎã§') ||  // ÎèôÏÇ¨ ÌòïÌÉú
            title.includes('ÏúºÎ°ú') ||  // Ï°∞ÏÇ¨ Ìè¨Ìï®
            title.match(/^[Í∞Ä-Ìû£]{1,2}$/) ||  // ÎÑàÎ¨¥ ÏßßÏùÄ Ï†úÎ™© (1-2Í∏ÄÏûê)
            !title.trim();  // Îπà Ï†úÎ™©
          
          if (isBadTitle) {
            problemTitles.push({
              venue: venue,
              title: title,
              id: ex.id,
              dates: `${ex.start_date} ~ ${ex.end_date}`,
              descStart: ex.description ? ex.description.substring(0, 100) : ''
            });
          }
        }
      }
    }
    
    // Î¨∏Ï†ú ÏûàÎäî Ï†úÎ™©Îì§ Ï∂úÎ†•
    if (problemTitles.length === 0) {
      console.log('\n‚úÖ Ï£ºÏöî Í∏∞Í¥ÄÏùò Ï†ÑÏãú Ï†úÎ™©ÏùÄ Î™®Îëê Ï†ïÏÉÅÏûÖÎãàÎã§.');
    } else {
      console.log(`\nüî¥ Î¨∏Ï†úÍ∞Ä ÏûàÎäî Ï†ÑÏãú Ï†úÎ™© ${problemTitles.length}Í∞ú:\n`);
      
      // Í∏∞Í¥ÄÎ≥ÑÎ°ú Í∑∏Î£πÌôî
      const byVenue = {};
      problemTitles.forEach(item => {
        if (!byVenue[item.venue]) {
          byVenue[item.venue] = [];
        }
        byVenue[item.venue].push(item);
      });
      
      Object.entries(byVenue).forEach(([venue, items]) => {
        console.log(`\nüìç ${venue} (${items.length}Í∞ú Î¨∏Ï†ú):`);
        console.log('-'.repeat(80));
        
        items.forEach((item, idx) => {
          console.log(`\n${idx + 1}. ID: ${item.id}`);
          console.log(`   Ï†úÎ™©: "${item.title}"`);
          console.log(`   Í∏∞Í∞Ñ: ${item.dates}`);
          if (item.descStart) {
            console.log(`   ÏÑ§Î™Ö ÏãúÏûë: "${item.descStart}..."`);
          }
        });
      });
    }
    
    // extractTitle Ìï®ÏàòÍ∞Ä ÎßåÎì§ Ïàò ÏûàÎäî Î¨∏Ï†ú Ï†úÎ™© Ìå®ÌÑ¥ ÌôïÏù∏
    console.log('\n\nüìä API extractTitle Ìï®ÏàòÍ∞Ä ÎßåÎì§ Í∞ÄÎä•ÏÑ±Ïù¥ ÏûàÎäî Ï†úÎ™©Îì§:');
    console.log('-'.repeat(80));
    
    const { data: noTitleOrLongDesc } = await supabase
      .from('exhibitions')
      .select('id, title_local, venue_name, description')
      .in('venue_name', majorVenues)
      .gte('end_date', '2025-01-01')
      .limit(10);
    
    noTitleOrLongDesc?.forEach((ex, idx) => {
      if (ex.description) {
        // extractTitleÏù¥ ÌïòÎäî Í≤ÉÏ≤òÎüº description Ï≤´ Ï§Ñ Ï∂îÏ∂ú
        const firstLine = ex.description.split('\n')[0].trim();
        if (firstLine !== ex.title_local && firstLine.length > 0) {
          console.log(`\n${idx + 1}. ${ex.venue_name}`);
          console.log(`   DB Ï†úÎ™©: "${ex.title_local}"`);
          console.log(`   APIÍ∞Ä Ï∂îÏ∂úÌï† Ï†úÎ™©: "${firstLine.substring(0, 60)}${firstLine.length > 60 ? '...' : ''}"`);
        }
      }
    });
    
  } catch (error) {
    console.error('‚ùå Ïã§Ìñâ Ï§ë Ïò§Î•ò:', error);
  }
}

checkBadTitlesInMajorVenues();