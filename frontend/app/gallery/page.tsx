'use client';

import { useState, useEffect, Suspense } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Palette, Grid3X3, Heart, Bookmark, User, Filter, Search, Loader2, ArrowLeft, Shuffle, ExternalLink, Eye, UserPlus, Sparkles } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import ArtworkActions from '@/components/ui/ArtworkActions';
import ArtworkAttribution from '@/components/ui/ArtworkAttribution';
import { useLanguage } from '@/contexts/LanguageContext';
import { galleryApi, Artwork, FollowingArtist } from '@/lib/gallery-api';
import { useAuth } from '@/hooks/useAuth';
import { useRouter, useSearchParams } from 'next/navigation';
import { OptimizedImage } from '@/components/ui/OptimizedImage';
import toast from 'react-hot-toast';

// ÏÉàÎ°úÏö¥ Ïª¥Ìè¨ÎÑåÌä∏Îì§ import
import { SayuBeamsBackground } from '@/components/ui/sayu-beams-background';
import { Badge } from '@/components/ui/badge';
import { CategoryFilter, FloatingDock, MobileBottomNav, GalleryStats } from './gallery-components';
import { Gallery4 } from '@/components/ui/gallery4';
import { SayuGalleryGrid } from '@/components/ui/sayu-gallery-grid';
import { ChevronRight, LayoutGrid, List } from 'lucide-react';
import { aptRecommendations } from './sayu-recommendations';

interface UserProfile {
  id: string;
  sayuType: string;
  email: string;
  name: string;
  typeCode?: string;
  personalityType?: string;
}

interface GalleryArtwork {
  id: string;
  title: string;
  artist: string;
  year: string;
  imageUrl: string;
  museum: string;
  medium: string;
  department: string;
  culture?: string;
  period?: string;
  dimensions?: string;
  museumUrl?: string;
  isPublicDomain?: boolean;
  license?: string;
  matchPercent?: number;
  curatorNote?: string;
  description?: string;
}

const ART_CATEGORIES = [
  { id: 'all', name: 'Ï†ÑÏ≤¥', icon: Sparkles },
  { id: 'paintings', name: 'ÌöåÌôî', metDepartment: 11 },
  { id: 'sculpture', name: 'Ï°∞Í∞Å', metDepartment: 12 },
  { id: 'photography', name: 'ÏÇ¨ÏßÑ', metDepartment: 12 },
  { id: 'asian-art', name: 'ÎèôÏñëÎØ∏Ïà†', metDepartment: 6 },
  { id: 'modern', name: 'ÌòÑÎåÄÎØ∏Ïà†', metDepartment: 21 },
  { id: 'contemporary', name: 'Ïª®ÌÖúÌè¨Îü¨Î¶¨', metDepartment: 21 }
];

function GalleryContent() {
  const { user, loading } = useAuth();
  const { language } = useLanguage();
  const router = useRouter();
  const searchParams = useSearchParams();
  const isGuestMode = searchParams?.get('guest') === 'true';
  const [galleryArtworks, setGalleryArtworks] = useState<GalleryArtwork[]>([]);
  const [loading_artworks, setLoadingArtworks] = useState(true);
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [likedArtworks, setLikedArtworks] = useState<Set<string>>(new Set());
  const [viewedArtworks, setViewedArtworks] = useState<Set<string>>(new Set());
  const [savedArtworks, setSavedArtworks] = useState<Set<string>>(new Set());
  
  // ÏÉàÎ°úÏö¥ ÌÜµÍ≥Ñ ÏÉÅÌÉú
  const [monthlyCollected, setMonthlyCollected] = useState(0);
  const [todayDiscovered, setTodayDiscovered] = useState(0);
  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);
  const [recommendedArtworks, setRecommendedArtworks] = useState<any[]>([]);
  const [layout, setLayout] = useState<'masonry' | 'grid' | 'list'>('masonry');

  // Load user profile and preferences
  useEffect(() => {
    if (user && !isGuestMode) {
      fetchUserProfile();
      loadUserPreferences();
    } else if (isGuestMode) {
      loadUserPreferences();
    }
  }, [user, isGuestMode]);

  // Load artworks when category changes
  useEffect(() => {
    console.log('üîÑ useEffect triggered for category:', selectedCategory);
    fetchArtworks(selectedCategory);
  }, [selectedCategory]);

  // Load recommended artworks
  useEffect(() => {
    loadRecommendedArtworks();
  }, [userProfile, selectedCategory]);

  const fetchUserProfile = async () => {
    try {
      if (user) {
        setUserProfile({
          id: user.id,
          sayuType: user.personalityType || 'SREF',
          email: user.auth?.email || '',
          name: user.nickname || '',
          personalityType: user.personalityType || 'SREF',
          typeCode: user.typeCode || user.personalityType || 'SREF'
        });
      }
    } catch (error) {
      console.error('Error fetching profile:', error);
      const mockProfile: UserProfile = {
        id: 'guest',
        sayuType: 'SREF',
        email: '',
        name: 'Guest',
        typeCode: 'SREF',
        personalityType: 'SREF'
      };
      setUserProfile(mockProfile);
    }
  };

  const loadUserPreferences = async () => {
    // Check if in guest mode
    const guestMode = !user || isGuestMode;
    
    if (guestMode) {
      // For guest mode, load from guest storage
      const { GuestStorage } = await import('@/lib/guest-storage');
      const guestData = GuestStorage.getData();
      setLikedArtworks(new Set(guestData.savedArtworks));
      setViewedArtworks(new Set(guestData.viewedArtworks));
    } else {
      // For logged-in users, load from localStorage
      const liked = localStorage.getItem('likedArtworks');
      const viewed = localStorage.getItem('viewedArtworks');
      if (liked) setLikedArtworks(new Set(JSON.parse(liked)));
      if (viewed) setViewedArtworks(new Set(JSON.parse(viewed)));
    }
  };

  const saveUserPreferences = () => {
    localStorage.setItem('likedArtworks', JSON.stringify([...likedArtworks]));
    localStorage.setItem('viewedArtworks', JSON.stringify([...viewedArtworks]));
  };

  const loadRecommendedArtworks = async () => {
    try {
      // Import the new recommendation system
      const { getPersonalizedRecommendations } = await import('./artwork-recommendations');
      
      const userType = userProfile?.typeCode || userProfile?.personalityType || user?.aptType || 'SREF';
      const recommendations = getPersonalizedRecommendations(userType, selectedCategory);
      
      // Transform to match existing interface
      const formattedRecommendations = recommendations.slice(0, 5).map((rec, i) => ({
        id: rec.id || `rec-${i}`,
        title: rec.title,
        artist: rec.artist,
        year: rec.year,
        description: rec.description || rec.curatorNote,
        href: '#',
        image: rec.cloudinaryUrl || rec.imageUrl || `https://picsum.photos/600/400?random=rec${i}`,
        matchPercent: rec.matchPercent,
        curatorNote: rec.curatorNote
      }));
      
      setRecommendedArtworks(formattedRecommendations);
    } catch (error) {
      console.error('Failed to load recommendations:', error);
      setRecommendedArtworks([]);
    }
  };

  const fetchArtworks = async (category: string) => {
    console.log('üé® fetchArtworks started for category:', category);
    console.log('üîÑ Setting loading to true...');
    setLoadingArtworks(true);
    
    try {
      console.log('Fetching artworks for category:', category);
      
      // Ïú†Ï†ÄÏùò APT Ïú†ÌòïÏóê Îî∞Î•∏ ÎßûÏ∂§ Ï∂îÏ≤ú ÏûëÌíà Í∞ÄÏ†∏Ïò§Í∏∞
      const getPersonalizedArtworks = async () => {
        try {
          const { getPersonalizedRecommendations } = await import('./artwork-recommendations');
          const userType = user?.aptType || userProfile?.typeCode || 'SREF';
          const recommendations = getPersonalizedRecommendations(userType, category);
          
          return recommendations.map((artwork, i) => ({
            id: artwork.id || `apt-${userType}-${i}`,
            title: artwork.title,
            artist: artwork.artist,
            year: artwork.year,
            imageUrl: artwork.cloudinaryUrl || artwork.imageUrl || 'https://via.placeholder.com/400x300',
            museum: artwork.museum || 'SAYU Curated Collection',
            medium: artwork.medium || 'Mixed Media',
            department: artwork.department || category,
            isPublicDomain: artwork.isPublicDomain !== undefined ? artwork.isPublicDomain : true,
            license: 'CC0',
            matchPercent: artwork.matchPercent,
            curatorNote: artwork.curatorNote,
            description: artwork.description
          }));
        } catch (error) {
          console.error('Error getting personalized artworks:', error);
          return [];
        }
      };
      
      // Get personalized artworks based on user type and category
      const personalizedArtworks = await getPersonalizedArtworks();
      
      // If we have personalized artworks, use them
      // Otherwise, get from recommendation system
      let selectedArtworks = [];
      
      if (personalizedArtworks.length > 0) {
        selectedArtworks = personalizedArtworks;
      } else {
        // Fallback: get recommendations from the system
        try {
          const { getRandomRecommendations } = await import('./artwork-recommendations');
          const fallbackArtworks = getRandomRecommendations(category);
          selectedArtworks = fallbackArtworks.map(artwork => ({
            id: artwork.id,
            title: artwork.title,
            artist: artwork.artist,
            year: artwork.year,
            imageUrl: artwork.cloudinaryUrl || artwork.imageUrl,
            museum: artwork.museum,
            medium: artwork.medium,
            department: artwork.department,
            isPublicDomain: artwork.isPublicDomain,
            license: 'CC0',
            matchPercent: artwork.matchPercent,
            curatorNote: artwork.curatorNote,
            description: artwork.description
          }));
        } catch (error) {
          console.error('Error loading fallback artworks:', error);
          selectedArtworks = [];
        }
      }
      const mockArtworks: GalleryArtwork[] = selectedArtworks.map((artwork, i) => ({
        id: artwork.id || `${category}-${i}`,
        title: artwork.title,
        artist: artwork.artist,
        year: artwork.year,
        imageUrl: artwork.imageUrl,
        museum: artwork.museum || 'The Metropolitan Museum of Art',
        medium: artwork.medium || (category === 'sculpture' ? 'Marble/Bronze' : category === 'photography' ? 'Photography' : 'Oil on canvas'),
        department: artwork.department || category,
        isPublicDomain: artwork.isPublicDomain !== undefined ? artwork.isPublicDomain : true,
        license: artwork.license || 'CC0',
        matchPercent: artwork.matchPercent,
        curatorNote: artwork.curatorNote,
        description: artwork.description
      }));
      
      console.log('‚úÖ Mock artworks created:', mockArtworks.length);
      setGalleryArtworks(mockArtworks);
      console.log('üîÑ Setting loading to false...');
      setLoadingArtworks(false);
      console.log('‚úÖ fetchArtworks completed successfully');
    } catch (error) {
      console.error('Error fetching artworks:', error);
      toast.error('Failed to load artworks. Please try again.');
    } finally {
      setLoadingArtworks(false);
    }
  };

  const handleLike = async (artworkId: string) => {
    console.log('üöÄ handleLike called with artworkId:', artworkId);
    
    const newLiked = new Set(likedArtworks);
    const isLiking = !newLiked.has(artworkId);
    
    console.log('Current liked artworks:', [...likedArtworks]);
    console.log('Is liking:', isLiking);
    
    if (isLiking) {
      newLiked.add(artworkId);
      toast.success('‚ù§Ô∏è Added to favorites!');
      console.log('‚úÖ Added to favorites');
    } else {
      newLiked.delete(artworkId);
      toast.success('üíî Removed from favorites');
      console.log('‚ùå Removed from favorites');
    }
    
    setLikedArtworks(newLiked);
    console.log('New liked artworks:', [...newLiked]);
    
    // Save to guest storage if in guest mode
    if (effectiveGuestMode) {
      const { GuestStorage } = await import('@/lib/guest-storage');
      if (isLiking) {
        GuestStorage.addSavedArtwork(artworkId);
      } else {
        GuestStorage.removeSavedArtwork(artworkId);
      }
      
      // Show prompt after first save
      if (isLiking && GuestStorage.getData().savedArtworks.length === 1) {
        setTimeout(() => {
          window.dispatchEvent(new CustomEvent('guest-milestone', { 
            detail: { milestone: 'first_save' }
          }));
        }, 1000);
      }
    } else {
      saveUserPreferences();
    }
  };
  
  const handleSave = async (artworkId: string) => {
    const newSaved = new Set(savedArtworks);
    const isSaving = !newSaved.has(artworkId);
    
    console.log('handleSave called:', { artworkId, isSaving });
    console.log('recommendedArtworks:', recommendedArtworks);
    
    if (isSaving) {
      newSaved.add(artworkId);
      toast.success('üìå ÎÇ¥ ÏïÑÌä∏ Ïª¨Î†âÏÖòÏóê Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§!');
      
      // Ïò§Îäò Î∞úÍ≤¨Ìïú ÏûëÌíà Ïπ¥Ïö¥Ìä∏ Ï¶ùÍ∞Ä
      setTodayDiscovered(prev => prev + 1);
      
      // Ï∂îÏ≤ú ÏûëÌíàÏóêÏÑú Î≥¥Í¥ÄÌïú ÏûëÌíàÏùÑ galleryArtworks Îß® ÏïûÏóê Ï∂îÍ∞Ä (ÏµúÏã† Ïàú)
      const savedArtwork = recommendedArtworks.find(artwork => artwork.id === artworkId);
      console.log('Found savedArtwork:', savedArtwork);
      
      if (savedArtwork) {
        setGalleryArtworks(prev => {
          console.log('Current galleryArtworks length:', prev.length);
          const exists = prev.some(artwork => artwork.id === artworkId);
          console.log('Artwork exists in gallery:', exists);
          
          if (!exists) {
            // ÏÉàÎ°úÏö¥ ÏûëÌíàÏùÑ Î∞∞Ïó¥Ïùò Îß® ÏïûÏóê Ï∂îÍ∞Ä (unshift Ìö®Í≥º)
            const newArtwork = {
              id: savedArtwork.id,
              title: savedArtwork.title,
              artist: savedArtwork.artist,
              year: savedArtwork.year,
              imageUrl: savedArtwork.image || savedArtwork.imageUrl || savedArtwork.cloudinaryUrl,
              museum: savedArtwork.museum || 'SAYU Curated',
              medium: savedArtwork.medium || 'Mixed Media',
              department: savedArtwork.department || 'Contemporary Art',
              isPublicDomain: savedArtwork.isPublicDomain || true,
              license: savedArtwork.license || 'CC0',
              matchPercent: savedArtwork.matchPercent,
              curatorNote: savedArtwork.description || savedArtwork.curatorNote,
              description: savedArtwork.description
            };
            console.log('Adding newArtwork to gallery:', newArtwork);
            
            // Îß® ÏïûÏóê ÏÉà ÏûëÌíà Ï∂îÍ∞Ä + Ï†ÄÏû• ÏÉÅÌÉú ÌëúÏãú
            const updatedArtworks = [{ ...newArtwork, isNewlyAdded: true }, ...prev];
            console.log('Updated galleryArtworks length:', updatedArtworks.length);
            return updatedArtworks;
          }
          return prev;
        });
      } else {
        console.log('savedArtwork not found in recommendedArtworks');
      }
    } else {
      newSaved.delete(artworkId);
      toast.success('üìå Ïª¨Î†âÏÖòÏóêÏÑú Ï†úÍ±∞ÎêòÏóàÏäµÎãàÎã§');
    }
    
    setSavedArtworks(newSaved);
    
    // Save to storage
    if (effectiveGuestMode) {
      const { GuestStorage } = await import('@/lib/guest-storage');
      if (isSaving) {
        GuestStorage.addSavedArtwork(artworkId);
      } else {
        GuestStorage.removeSavedArtwork(artworkId);
      }
    } else {
      saveUserPreferences();
    }
  };

  const handleView = async (artworkId: string) => {
    const newViewed = new Set(viewedArtworks);
    if (!newViewed.has(artworkId)) {
      newViewed.add(artworkId);
      setViewedArtworks(newViewed);
      saveUserPreferences();
    }
  };

  const shuffleArtworks = () => {
    const shuffled = [...galleryArtworks].sort(() => Math.random() - 0.5);
    setGalleryArtworks(shuffled);
    toast.success('Gallery shuffled!');
  };

  if (loading && !isGuestMode) {
    return (
      <div 
        className="min-h-screen flex items-center justify-center bg-cover bg-center bg-no-repeat relative"
        style={{ 
          backgroundImage: `url('/images/backgrounds/warm-corner-gallery-solitary-contemplation.jpg')`
        }}
      >
        <div className="absolute inset-0 bg-slate-900/70" />
        <div className="text-center relative z-10">
          <Eye className="w-12 h-12 mx-auto mb-4 animate-pulse text-purple-400" />
          <p className="text-slate-300">Loading your gallery...</p>
        </div>
      </div>
    );
  }

  // ÏûÑÏãúÎ°ú Ïù∏Ï¶ù Ï≤¥ÌÅ¨Î•º ÎπÑÌôúÏÑ±ÌôîÌïòÏó¨ guest Î™®ÎìúÎ°ú Ìï≠ÏÉÅ Ï†ëÍ∑º Í∞ÄÎä•ÌïòÎèÑÎ°ù Ìï®
  const effectiveGuestMode = !user || isGuestMode;

  // ÏÇ¨Ïö©Ïûê APT ÌÉÄÏûÖ Í∞ÄÏ†∏Ïò§Í∏∞
  const userAptType = userProfile?.typeCode || userProfile?.personalityType || 'SREF';

  return (
    <div 
      className="min-h-screen bg-cover bg-center bg-no-repeat relative"
      style={{ 
        backgroundImage: `url('/images/backgrounds/warm-corner-gallery-solitary-contemplation.jpg')`
      }}
    >
      {/* Background overlay for better readability */}
      <div className="absolute inset-0 bg-slate-900/60 backdrop-blur-[1px]" />
      {/* Header */}
      <motion.div 
        initial={{ y: -20, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        className="border-b border-slate-700 backdrop-blur-md sticky top-0 z-20 bg-slate-900/80 relative"
      >
        <div className="max-w-7xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <Button
                variant="ghost"
                size="icon"
                onClick={() => router.back()}
                className="text-slate-300 hover:text-white hover:bg-slate-800"
              >
                <ArrowLeft className="w-5 h-5" />
              </Button>
              <div>
                <h1 className="text-2xl font-bold bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent">
                  ÎÇ¥ Ïª¨Î†âÏÖò
                  {effectiveGuestMode && (
                    <Badge variant="secondary" className="ml-2 rounded-full bg-slate-700 text-slate-300">
                      Guest Mode
                    </Badge>
                  )}
                </h1>
                <p className="text-sm text-slate-400 mt-1">
                  {effectiveGuestMode 
                    ? `ÎÜÄÎùºÏö¥ ÏûëÌíàÎì§ÏùÑ Î∞úÍ≤¨ÌïòÏÑ∏Ïöî`
                    : `${userAptType} ÎãòÏùÑ ÏúÑÌïú ÎßûÏ∂§ ÌÅêÎ†àÏù¥ÏÖò`
                  }
                </p>
              </div>
            </div>
            <div className="flex items-center gap-2">
              {effectiveGuestMode ? (
                <>
                  <Button variant="outline" size="sm" onClick={() => router.push('/quiz')} className="border-purple-400 text-purple-400 hover:bg-purple-400 hover:text-white">
                    <UserPlus className="w-4 h-4 mr-2" />
                    Get Personalized
                  </Button>
                  <Button size="sm" onClick={() => router.push('/register')} className="bg-purple-600 hover:bg-purple-700">
                    Sign Up Free
                  </Button>
                </>
              ) : (
                <>
                  <Button 
                    size="sm" 
                    onClick={shuffleArtworks}
                    className="bg-purple-600/20 text-purple-300 hover:bg-purple-600/30 border-0"
                  >
                    <Shuffle className="w-4 h-4 mr-2" />
                    Shuffle
                  </Button>
                  <GalleryStats 
                    monthlyCollected={savedArtworks.size}  // Ïª¨Î†âÏÖòÌïú ÏûëÌíà Ïàò
                    totalLiked={likedArtworks.size}        // Ï¢ãÏïÑÏöîÌïú ÏûëÌíà Ïàò
                    todayDiscovered={todayDiscovered}      // Ïò§Îäò ÏÉàÎ°ú Î∞úÍ≤¨Ìïú ÏûëÌíà Ïàò
                  />
                </>
              )}
            </div>
          </div>
          
          {/* Category Filter - Í∞úÏÑ†Îêú Ïä§ÌÉÄÏùº */}
          <div className="mt-4">
            <div className="flex gap-2 overflow-x-auto pb-2">
              {ART_CATEGORIES.map((category) => (
                <button
                  key={category.id}
                  onClick={() => setSelectedCategory(category.id)}
                  className={`px-4 py-2 rounded-full text-sm font-medium whitespace-nowrap transition-all ${
                    selectedCategory === category.id
                      ? 'bg-purple-600 text-white shadow-lg'
                      : 'bg-slate-800 text-slate-300 hover:bg-slate-700 hover:text-white border border-slate-600'
                  }`}
                >
                  {category.name}
                </button>
              ))}
            </div>
          </div>
        </div>
      </motion.div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto p-4 relative z-10">
        {/* Ï∂îÏ≤ú ÏÑπÏÖò */}
        {!effectiveGuestMode && recommendedArtworks.length > 0 && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
            className="mb-8"
          >
            <div className="flex items-center justify-between mb-4">
              <div>
                <h2 className="text-xl font-semibold mb-1 text-white">
                  {userAptType} Ïú†ÌòïÏùÑ ÏúÑÌïú Ï∂îÏ≤ú ÏûëÌíà
                </h2>
                <p className="text-sm text-gray-300 mb-2">
                  AI CuratorÍ∞Ä ÎãπÏã†Ïùò APT Î∂ÑÏÑùÏùÑ Í∏∞Î∞òÏúºÎ°ú ÌÅêÎ†àÏù¥ÏÖòÌïú ÏûëÌíàÎì§ÏûÖÎãàÎã§
                </p>
                <div className="flex gap-4 text-xs text-white">
                  <span className="flex items-center gap-1">
                    ‚ù§Ô∏è <strong>Ï¢ãÏïÑÏöî</strong>: AIÍ∞Ä ÎπÑÏä∑Ìïú ÏûëÌíàÏùÑ Îçî Ï∂îÏ≤úÌï¥Ï§çÎãàÎã§
                  </span>
                  <span className="flex items-center gap-1">
                    üìå <strong>Î≥¥Í¥ÄÌïòÍ∏∞</strong>: ÎÇ¥ ÏïÑÌä∏ Ïª¨Î†âÏÖòÏóê Ï∂îÍ∞ÄÎê©ÎãàÎã§
                  </span>
                </div>
              </div>
              <Button variant="ghost" size="sm" className="rounded-full text-slate-400 hover:text-white hover:bg-slate-800">
                ÎçîÎ≥¥Í∏∞ <ChevronRight className="w-4 h-4 ml-1" />
              </Button>
            </div>
            
            {/* Ï∂îÏ≤ú ÏûëÌíà horizontal scroll */}
            <div className="relative overflow-x-auto pb-4">
              <div className="flex gap-4 min-w-max">
                {recommendedArtworks.slice(0, 5).map((item, index) => (
                  <motion.div
                    key={item.id}
                    initial={{ opacity: 0, x: 20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: index * 0.1 }}
                    className="group w-64 bg-slate-800 rounded-2xl overflow-hidden hover:shadow-xl transition-all duration-300 hover:scale-[1.02] cursor-pointer border border-slate-700 hover:border-purple-500"
                  >
                    <div className="aspect-[4/3] bg-slate-700 relative overflow-hidden">
                      <div className="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent opacity-0 group-hover:opacity-100 transition-opacity" />
                      
                      {/* Ï∂îÏ≤ú ÏûëÌíà Ïï°ÏÖò Î≤ÑÌäº */}
                      <div className="absolute top-3 right-3 flex gap-2 opacity-0 group-hover:opacity-100 transition-all duration-300 transform -translate-y-2 group-hover:translate-y-0 z-10">
                        <motion.button
                          whileHover={{ scale: 1.1 }}
                          whileTap={{ scale: 0.95 }}
                          className="p-2 rounded-full backdrop-blur-md bg-slate-800/80 hover:bg-slate-700/90 shadow-lg border border-slate-600 group/like"
                          onClick={(e) => {
                            e.stopPropagation();
                            console.log('‚ù§Ô∏è Ï∂îÏ≤ú ÏûëÌíà Ï¢ãÏïÑÏöî:', item.id);
                            handleLike(item.id);
                          }}
                          title="Ï¢ãÏïÑÏöî - AIÍ∞Ä ÎπÑÏä∑Ìïú ÏûëÌíàÏùÑ Îçî Ï∂îÏ≤úÌï¥Ï§çÎãàÎã§"
                        >
                          <Heart className={`w-4 h-4 transition-colors ${likedArtworks.has(item.id) ? 'text-red-500 fill-red-500' : 'text-purple-400 group-hover/like:text-red-400'}`} />
                        </motion.button>
                        
                        <motion.button
                          whileHover={{ scale: 1.1 }}
                          whileTap={{ scale: 0.95 }}
                          className="p-2 rounded-full backdrop-blur-md bg-slate-800/80 hover:bg-slate-700/90 shadow-lg border border-slate-600 group/save"
                          onClick={(e) => {
                            e.stopPropagation();
                            console.log('üìå Ï∂îÏ≤ú ÏûëÌíà Î≥¥Í¥Ä:', item.id);
                            handleSave(item.id);
                          }}
                          title="Î≥¥Í¥ÄÌïòÍ∏∞ - ÎÇ¥ ÏïÑÌä∏ Ïª¨Î†âÏÖòÏóê Ï∂îÍ∞ÄÎê©ÎãàÎã§"
                        >
                          <Bookmark className={`w-4 h-4 transition-colors ${savedArtworks.has(item.id) ? 'text-green-500 fill-green-500' : 'text-purple-400 group-hover/save:text-green-400'}`} />
                        </motion.button>
                      </div>
                      
                      <Sparkles className="absolute bottom-4 left-4 w-6 h-6 text-purple-400 opacity-0 group-hover:opacity-100 transition-all duration-300 transform group-hover:rotate-12" />
                      
                      {/* Ïã§Ï†ú Ïù¥ÎØ∏ÏßÄ ÌëúÏãú - CloudinaryÏóêÏÑú ÏßÅÏ†ë Î°úÎìú */}
                      <img 
                        src={item.image || `https://picsum.photos/600/450?random=${item.id}`} 
                        alt={item.title}
                        className="absolute inset-0 w-full h-full object-cover"
                        loading="lazy"
                      />
                    </div>
                    <div className="p-4">
                      <h3 className="font-semibold text-sm line-clamp-1 text-white">{item.title}</h3>
                      <p className="text-xs text-slate-400 mt-0.5">{item.artist} ¬∑ {item.year}</p>
                      <p className="text-xs text-slate-500 mt-2 line-clamp-2">{item.curatorNote || item.description}</p>
                      <div className="flex items-center justify-between mt-3">
                        <Badge variant="secondary" className="text-xs bg-purple-600/20 text-purple-300 border border-purple-500/30">
                          {userAptType} Îß§Ïπò {item.matchPercent || 95}%
                        </Badge>
                        <ChevronRight className="w-4 h-4 text-slate-500 group-hover:text-purple-400 transition-colors" />
                      </div>
                    </div>
                  </motion.div>
                ))}
              </div>
            </div>
          </motion.div>
        )}

        {/* ÏïÑÏπ¥Ïù¥Îπô ÏÑπÏÖò */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h2 className="text-xl font-semibold mb-1 text-white">
                {language === 'ko' ? 'ÎÇ¥ ÏïÑÌä∏ ÏïÑÏπ¥Ïù¥Îπô' : 'My Art Collection'}
              </h2>
              <p className="text-sm text-gray-300">
                {language === 'ko' 
                  ? 'ÏßÄÍ∏àÍπåÏßÄ ÏàòÏßëÌïú ÏûëÌíàÎì§ÏùÑ ÌïúÎààÏóê Î≥º Ïàò ÏûàÏäµÎãàÎã§'
                  : 'View all the artworks you\'ve collected'}
              </p>
            </div>
            <Button variant="ghost" size="sm" className="rounded-full text-slate-400 hover:text-white hover:bg-slate-800">
              {language === 'ko' ? 'Î™®Îëê Î≥¥Í∏∞' : 'View All'} <ChevronRight className="w-4 h-4 ml-1" />
            </Button>
          </div>
        </div>


        {/* APT Ïú†ÌòïÎ≥Ñ ÎßûÏ∂§ Ï∂îÏ≤ú Î∞∞ÎÑà */}
        {user?.aptType && selectedCategory === 'all' && galleryArtworks.some(a => a.matchPercent) && (
          <div className="mb-6 p-4 bg-gradient-to-r from-purple-600/20 to-blue-600/20 rounded-xl border border-purple-500/30">
            <div className="flex items-start gap-3">
              <div className="p-2 bg-purple-600/20 rounded-lg">
                <Sparkles className="w-5 h-5 text-yellow-400" />
              </div>
              <div className="flex-1">
                <h3 className="font-semibold text-white mb-1">
                  {user.aptType} Ïú†Ìòï ÎßûÏ∂§ Ï∂îÏ≤ú üé®
                </h3>
                <p className="text-sm text-slate-300 mb-2">
                  ÎãπÏã†Ïùò ÏÑ±Í≤© Ïú†ÌòïÏóê ÌäπÎ≥ÑÌûà ÏÑ†Î≥ÑÎêú ÏûëÌíàÎì§ÏûÖÎãàÎã§. Í∞Å ÏûëÌíàÏùÄ ÎãπÏã†Ïùò Í∞êÏÉÅ ÏÑ±Ìñ•Í≥º ÏñºÎßàÎÇò Ïûò ÎßûÎäîÏßÄ Îß§Ïπò ÌçºÏÑºÌä∏Î°ú ÌëúÏãúÎê©ÎãàÎã§.
                </p>
                <div className="flex items-center gap-2 text-xs">
                  <span className="px-2 py-1 bg-yellow-400/20 text-yellow-400 rounded-full">
                    Í∞úÏù∏ÌôîÎêú Ï∂îÏ≤ú
                  </span>
                  <span className="text-slate-400">
                    {galleryArtworks.filter(a => a.matchPercent).length}Í∞ú ÏûëÌíà
                  </span>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Gallery Grid */}
        {loading_artworks ? (
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
            {[...Array(12)].map((_, i) => (
              <div key={i} className="aspect-square bg-slate-800 rounded-xl animate-pulse" />
            ))}
          </div>
        ) : galleryArtworks.length > 0 ? (
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
            {galleryArtworks.map((artwork, index) => (
              <motion.div
                key={artwork.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.05 }}
                className="group"
              >
                <div className="relative overflow-hidden rounded-xl bg-slate-800 shadow-lg hover:shadow-xl transition-all duration-300 border border-slate-700 hover:border-purple-500">
                  <div className="aspect-square bg-slate-700 flex items-center justify-center relative overflow-hidden">
                    <img 
                      src={artwork.imageUrl || `https://picsum.photos/400/400?random=${artwork.id}`} 
                      alt={artwork.title}
                      className="absolute inset-0 w-full h-full object-cover transition-transform duration-300 group-hover:scale-110"
                      loading="lazy"
                    />
                    
                  </div>
                  
                  <div className="p-3">
                    <h3 className="font-semibold text-white text-sm line-clamp-2">
                      {artwork.title}
                    </h3>
                    <p className="text-slate-400 text-xs mt-1">{artwork.artist}</p>
                    <p className="text-slate-500 text-xs">{artwork.year}</p>
                    
                    {/* APT Ïú†Ìòï ÎßûÏ∂§ Ï∂îÏ≤ú Ï†ïÎ≥¥ */}
                    {artwork.matchPercent && (
                      <div className="mt-2 flex items-center gap-2">
                        <div className="flex items-center gap-1">
                          <Sparkles className="w-3 h-3 text-yellow-400" />
                          <span className="text-xs text-yellow-400 font-medium">{artwork.matchPercent}% Îß§Ïπò</span>
                        </div>
                      </div>
                    )}
                    
                    {/* Action Buttons */}
                    <div className="mt-3 flex items-center justify-between">
                      <div className="flex gap-2">
                        <button
                          onClick={(e) => {
                            e.preventDefault();
                            e.stopPropagation();
                            console.log('‚ù§Ô∏è Heart button clicked for:', artwork.id);
                            handleLike(artwork.id);
                          }}
                          className="p-2 rounded-full bg-slate-700/50 hover:bg-slate-600 transition-all hover:scale-110"
                          title="Ï¢ãÏïÑÏöî"
                        >
                          <Heart className={`w-4 h-4 transition-colors ${likedArtworks.has(artwork.id) ? 'text-red-500 fill-red-500' : 'text-slate-300 hover:text-red-400'}`} />
                        </button>
                        <button
                          onClick={(e) => {
                            e.preventDefault();
                            e.stopPropagation();
                            console.log('üëÅÔ∏è View button clicked for:', artwork.id);
                            handleView(artwork.id);
                          }}
                          className="p-2 rounded-full bg-slate-700/50 hover:bg-slate-600 transition-all hover:scale-110"
                          title="Î≥¥Í∏∞"
                        >
                          <Eye className={`w-4 h-4 transition-colors ${viewedArtworks.has(artwork.id) ? 'text-blue-400' : 'text-slate-300 hover:text-blue-400'}`} />
                        </button>
                        <button
                          onClick={(e) => {
                            e.preventDefault();
                            e.stopPropagation();
                            console.log('üìå Save button clicked for:', artwork.id);
                            handleSave(artwork.id);
                          }}
                          className="p-2 rounded-full bg-slate-700/50 hover:bg-slate-600 transition-all hover:scale-110"
                          title="Ï†ÄÏû•"
                        >
                          <Bookmark className={`w-4 h-4 transition-colors ${savedArtworks.has(artwork.id) ? 'text-green-500 fill-green-500' : 'text-slate-300 hover:text-green-400'}`} />
                        </button>
                      </div>
                    </div>
                    
                    {artwork.curatorNote && (
                      <p className="text-xs text-slate-400 mt-1 line-clamp-2 italic">
                        "{artwork.curatorNote}"
                      </p>
                    )}
                  </div>
                </div>
              </motion.div>
            ))}
          </div>
        ) : (
          /* Empty state */
          <div className="text-center py-12">
            <Eye className="w-12 h-12 mx-auto mb-4 text-slate-600" />
            <h3 className="text-lg font-semibold mb-2 text-white">No artworks found</h3>
            <p className="text-slate-400 mb-4">Try selecting a different category</p>
            <Button onClick={() => fetchArtworks(selectedCategory)} className="bg-purple-600 hover:bg-purple-700">
              Retry
            </Button>
          </div>
        )}

        {/* Guest Mode CTA Banner */}
        {effectiveGuestMode && (
          <div className="mt-8 p-6 bg-slate-800 rounded-xl border border-slate-700">
            <div className="text-center">
              <h3 className="text-lg font-bold text-white mb-2">
                üé® {language === 'ko' ? 'ÎÇòÎßåÏùò ÏòàÏà† Ïó¨Ï†ïÏùÑ ÏãúÏûëÌïòÏÑ∏Ïöî' : 'Unlock Your Personal Art Journey'}
              </h3>
              <p className="text-slate-400 mb-4">
                {language === 'ko' 
                  ? 'ÏÑ±Í≤© ÌÖåÏä§Ìä∏Î•º ÌÜµÌï¥ ÎßûÏ∂§ Ï∂îÏ≤úÏùÑ Î∞õÍ≥†, Ï¢ãÏïÑÌïòÎäî ÏûëÌíàÏùÑ Ï†ÄÏû•ÌïòÍ≥†, ÎãπÏã†Í≥º Í≥µÎ™ÖÌïòÎäî ÏòàÏà†ÏùÑ Î∞úÍ≤¨ÌïòÏÑ∏Ïöî.'
                  : 'Take our personality quiz to get curated recommendations, save favorites, and discover art that truly resonates with you.'}
              </p>
              <div className="flex justify-center gap-3">
                <Button onClick={() => router.push('/quiz')} className="bg-purple-600 hover:bg-purple-700">
                  {language === 'ko' ? 'ÏÑ±Í≤© ÌÖåÏä§Ìä∏ ÌïòÍ∏∞' : 'Take Personality Quiz'}
                </Button>
                <Button onClick={() => router.push('/register')} variant="outline" className="border-slate-600 text-slate-300 hover:bg-slate-700">
                  {language === 'ko' ? 'Î¨¥Î£å Í≥ÑÏ†ï ÎßåÎì§Í∏∞' : 'Create Free Account'}
                </Button>
              </div>
            </div>
          </div>
        )}

        {/* Met Museum Attribution */}
        <div className="mt-8 p-4 bg-slate-800/50 rounded-lg text-sm border border-slate-700">
          <p className="flex items-center gap-2 mb-2 text-slate-300">
            <ExternalLink className="w-4 h-4" />
            <strong>{language === 'ko' ? 'ÏûëÌíà Ïª¨Î†âÏÖò' : 'Artwork Collection'}</strong>
          </p>
          <p className="text-slate-400">
            {language === 'ko' 
              ? 'Ïù¥ Í∞§Îü¨Î¶¨Îäî Î©îÌä∏Î°úÌè¥Î¶¨ÌÉÑ ÎØ∏Ïà†Í¥ÄÏùò Ïò§Ìîà Ïï°ÏÑ∏Ïä§ Ïª¨Î†âÏÖò ÏûëÌíàÎì§ÏùÑ ÏÑ†Î≥¥ÏûÖÎãàÎã§. Î™®Îì† ÏûëÌíàÏùÄ ÌÅ¨Î¶¨ÏóêÏù¥Ìã∞Î∏å Ïª§Î®ºÏ¶à Ï†úÎ°ú(CC0) ÎùºÏù¥ÏÑ†Ïä§ ÌïòÏóê Ï†úÍ≥µÎêòÎ©∞, ÌçºÎ∏îÎ¶≠ ÎèÑÎ©îÏù∏ÏúºÎ°ú ÏûêÏú†Î°≠Í≤å ÏÇ¨Ïö© Í∞ÄÎä•Ìï©ÎãàÎã§.'
              : 'This gallery features artworks from The Metropolitan Museum of Art\'s Open Access collection, available under the Creative Commons Zero (CC0) license. All displayed artworks are in the public domain and free to use.'}
          </p>
          <p className="mt-2">
            <a 
              href="https://www.metmuseum.org/about-the-met/policies-and-documents/open-access" 
              target="_blank" 
              rel="noopener noreferrer"
              className="text-purple-400 hover:underline"
            >
              {language === 'ko' ? 'Met Ïò§Ìîà Ïï°ÏÑ∏Ïä§ Ïù¥ÎãàÏÖîÌã∞Î∏å ÏûêÏÑ∏Ìûà Î≥¥Í∏∞ ‚Üí' : 'Learn more about The Met\'s Open Access initiative ‚Üí'}
            </a>
          </p>
        </div>
      </div>
    </div>
  );
}

export default function GalleryPage() {
  return (
    <Suspense fallback={
      <div 
        className="min-h-screen flex items-center justify-center bg-cover bg-center bg-no-repeat relative"
        style={{ 
          backgroundImage: `url('/images/backgrounds/warm-corner-gallery-solitary-contemplation.jpg')`
        }}
      >
        <div className="absolute inset-0 bg-slate-900/70" />
        <div className="text-center relative z-10">
          <Eye className="w-12 h-12 mx-auto mb-4 animate-pulse text-purple-400" />
          <p className="text-slate-300">Loading gallery...</p>
        </div>
      </div>
    }>
      <GalleryContent />
    </Suspense>
  );
}